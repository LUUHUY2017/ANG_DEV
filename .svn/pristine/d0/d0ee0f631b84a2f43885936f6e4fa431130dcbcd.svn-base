import { IOption } from 'ng-select';   // select option <option>

import { Component, OnInit, ViewChild, ElementRef, TemplateRef, OnDestroy } from '@angular/core';
import { Router } from '@angular/router';
import { environment } from '../../../../environments/environment';
import { AppService } from '../../../app.service';

// Import BlockUI decorator & optional NgBlockUI type
import { BlockUI, NgBlockUI } from 'ng-block-ui';
// import Modal
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
// chỉnh css angular
import { ViewEncapsulation } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
// import viewchild
import { TerminalMenuComponent } from '../../viewchild/terminalmenu/terminalmenu.component';
// import notification
import { NotifierService } from 'angular-notifier';
import { BehaviorSubject } from 'rxjs';
import { language } from '../../admin/admin_language';
import { language_en } from '../../admin/admin_language_en';
import 'rxjs/operators/map';
// import * as io from 'socket.io-client';

@ViewChild(TerminalMenuComponent)

@Component({
  templateUrl: './terminalmonitor.component.html',
  styleUrls: ['./terminalmonitor.component.scss'],
  // chỉnh css angular
  encapsulation: ViewEncapsulation.None
})

export class TerminalMonitorComponent implements OnInit, OnDestroy {
  // @ViewChild('dataTable') table: ElementRef;
  @BlockUI() blockUI: NgBlockUI;
  // private socket: SocketIOClient.Socket;
  // connectSocketIo = localStorage.getItem('connectSocketIo') === '1';
  // page_id = '\'' + environment.Pages.age.terminals + '\'';
  private readonly notifier: NotifierService;
  canAdd: boolean;
  // can_update: boolean;
  // can_delete: boolean;
  // Khai báo kiểu dữ kiệu
  public data: any;
  dataFilter: any;
  dataUpdate: any;
  organizationId: string;
  organizationArray: Array<IOption>;
  modalRef: BsModalRef;
  locationArray: Array<any>;
  // phân trang bảng
  rowsOnPage = 15;
  filterQuery = '';
  SelectionDisplay: boolean;
  menuTree: any;
  siteSelectionDisplay: boolean;
  siteTreeDisplay: boolean;
  userlogged = JSON.parse(localStorage.getItem(environment.UserLoged));
  webState: BehaviorSubject<any>;
  showSelectCrud: boolean;
  subcription: any;
  tu_khoa: any;
  optionDelete: number;
  oldState: string;
  siteSelected: any;
  errorArray: any[];
  deleteItem: any;
  locationSelected: any[]; language: any;
  siteFilterModel: any;
  interval;
  isSuperAdmin: boolean;
  recordDate: string;
  deleteSNstring: string;
  type_language = JSON.parse(localStorage.getItem(environment.language));
  brandArray: Array<any>;
  canDeleteItem: boolean;
  constructor(
    private router: Router,
    private route: ActivatedRoute,
    notifierService: NotifierService,
    private appservice: AppService,
    private modalService: BsModalService) {
    this.notifier = notifierService;
    // this.socket = io(environment.UrlSocket);
    this.type_language === 'vn' ? this.language = language : this.language = language_en;
  }
  ngOnInit(): void {
    const firstState = {
      data: null
      , state: null
    };
    this.webState = new BehaviorSubject(firstState);
    this.setDefaultValue();
    this.watchStateChange();
    this.getConfig();
    this.setDefaultCrud(false);
  }
  open(url) {
    window.open(url, '_blank');
  }
  watchStateChange() {
    this.subcription = this.webState.asObservable();
    this.subcription.subscribe(res => {
      const currentState = res.state;
      const item = this.cloneArray(res.data);
      // console.log('trạng thái trước', this.oldState);
      // console.log('trạng thái hiện tại', currentState);
      // Đây là sự kiện khi vừa load trang get data về
      if (currentState === environment.STATE.retrieve) {
        // Sự kiện nhận dữ liệu về thì bỏ hành động tìm kiếm trước đó
        // this.tu_khoa = null;
        this.data = item;
        this.dataFilter = this.data;
        // this.setIntervalUpdateState();
        // Nếu là sự kiện thêm mới
      } else if (currentState === environment.STATE.insert) {
        this.data.push(item);
        // Nếu trạng thái trước đó là search
        this.notifier.notify('success', this.language.them_moi_thanh_cong);
        // nếu là sự kiện sửa
      } else if (currentState === environment.STATE.update) {
        for (let i = 0; i < this.data.length; i++) {
          if (this.data[i].id === item.id) {
            this.data[i] = item;
            break;
          }
        }
        this.notifier.notify('success', this.language.cap_nhat_thanh_cong);
        // Nếu là sự kiện xóa
      } else if (currentState === environment.STATE.delete) {
        this.data.splice(this.data.findIndex(e => e.id === item.id), 1);
        this.notifier.notify('success', this.language.xoa_thanh_cong);
        // Nếu có sự kiện tìm kiếm
      } else if (currentState === environment.STATE.search) {
        console.log('environment.STATE.search', environment.STATE.search);
        this.dataFilter = item;
      }
    }, (err) => {
      console.log(err);
    }, () => {
      console.log('complete');
    });
  }
  setIntervalUpdateState() {
    clearInterval(this.interval);
    this.interval = setInterval(() => {
      this.getData();
    }, 60000);
  }
  siteFilter(item: any) {
    this.siteFilterModel = item;
    this.siteSelectionDisplay = true;
    this.getData();
  }
  cloneArray(item: Array<any>) {
    const newJSONString = JSON.stringify(item);
    return JSON.parse(newJSONString);
  }
  showSelectFunc() {
    this.showSelectCrud = false;
    const lever = Number(this.userlogged.lever);
    const org_id = Number(this.userlogged.organization_id);
    if (lever === 0 && org_id === 0) {
      this.showSelectCrud = true;
    }
  }
  setDefaultCrud(bool: boolean) {
    this.canAdd = bool;
    // this.can_update = bool;
    // this.can_delete = bool;
  }
  checkSN() {
    // const value = target.value;
    // console.log(value);
    // console.log(this.deleteItem);
    if (this.deleteItem !== null && this.deleteSNstring === this.deleteItem.serial_number) {
      this.canDeleteItem = true;
    } else {
      this.canDeleteItem = false;
    }
  }
  setDefaultValue() {
    this.deleteSNstring = null;
    this.isSuperAdmin = false;
    this.dataFilter = [];
    this.data = [];
    this.dataUpdate = null;
    this.errorArray = [];
    this.optionDelete = 0;
    this.siteSelectionDisplay = true;
    this.locationArray = [];
    this.siteSelected = null;
    this.siteFilterModel = null;
    this.canDeleteItem = false;
  }
  // Hàm đệ quy menu
  recusiveMenu(array: any[], id = null, space = 0) {
    array.forEach(element => {
      if (element.parent_id === id) {
        const a_id = element.id;
        this.menuTree.push({
          id: element.id
          , site_name: element.site_name
          , parent_id: element.parent_id
          , alevel: space
          , enables: element.enables
          , store: element.store
        });
        const scope = space + 1;
        this.recusiveMenu(array, a_id, scope);
      }
    });
  }
  submitToSearch(form: any) {
    let oldData = this.data;
    const inputData = form.value; // Where
    console.log(inputData);
    // tslint:disable-next-line: forin
    for (const key in inputData) {
      if (inputData[key]) {
        const lowerStr = inputData[key].toLowerCase();
        oldData = oldData.filter((e: any) => e.hasOwnProperty(key) && (inputData[key] === ''
        || e[key].toLowerCase().indexOf(lowerStr) !== -1));
      }
    }
    console.log('oldData', oldData);
    this.updateState(environment.STATE.search, oldData);
  }
  updateState(stateString: string, data = null) {
    const stateWithData = {
      state: stateString
      , data: data
    };
    console.log(stateWithData);
    const oldStateObj = this.webState.getValue();
    this.oldState = oldStateObj.state;
    this.webState.next(stateWithData);
    // this.webState.complete();
  }
  // Lấy thông tin tổ chức lên ng-select
  getConfig() {
    this.blockUI.start(this.language.dang_tai_du_lieu);
    const url = environment.API.userGetOrg;
    this.appservice.get(url).subscribe(
      param => {
        console.log('get_user_page_parametter', param);
        if (param.hasOwnProperty('status') && param.status === 0) {
          this.notifier.notify('error', this.language.co_loi_xay_ra);
          this.blockUI.stop();
          return;
        }
        if (param.isSuperAdmin) {
          this.isSuperAdmin = true;
        }
        const org = param.organization_arr.slice(0);
        this.organizationArray = org;
        this.organizationId = param.organization_arr[0].value;
        this.getSiteTree();
      },
      (error) => {
        this.notifier.notify('error', this.language.khong_the_ket_noi_may_chu);
        this.blockUI.stop();
      });
  }
  // Modal hỏi xóa
  openPopupDeleteTemplate(item, dialog: TemplateRef<any>) {
    console.log('dữ liệu từng bản ghi', item);
    this.modalRef = this.modalService.show(dialog, {
      backdrop: true,
      ignoreBackdropClick: true
    });
    this.deleteSNstring = null;
    this.deleteItem = item;
  }
  // Open Modal thêm mới
  openPopupCreateItem(templates: TemplateRef<any>) {
    if (!this.canAdd) {
      return;
    }
    this.errorArray.length = 0;
    this.siteSelected = { ...this.siteFilterModel };
    this.locationSelected = this.locationArray.filter(i => Number(i.site_id) === Number(this.siteFilterModel.id));
    this.modalRef = this.modalService.show(templates, {
      backdrop: true,
      ignoreBackdropClick: true
    });
  }
  // Open modal update từng thiết bị
  openPopupUpdate(item, template: TemplateRef<any>) {
    console.log('dữ liệu từng bản ghi', item);
    this.errorArray.length = 0;
    this.siteTreeDisplay = false;
    this.dataUpdate = Object.assign({}, item);
    const siteId = item.site_id;
    this.siteSelected = this.menuTree.find(e => e.id === siteId);
    this.locationSelected = this.locationArray.filter(e => Number(e.site_id) === Number(siteId));
    this.modalRef = this.modalService.show(template, {
      backdrop: true,
      ignoreBackdropClick: true
    });
  }
  getSiteTree() {
    const data = {
      organization_id: this.organizationId
    };
    if (!this.blockUI.isActive) {
      this.blockUI.start(this.language.dang_tai_du_lieu);
    }
    const url = environment.API.sites + '_get_site_for_report';
    this.menuTree = [];
    this.setDefaultCrud(false);
    this.appservice.post(data, url).subscribe(res => {
      console.log(res);
      if (res.site_array.length === 0) {
        this.notifier.notify('error', 'Tổ chức chưa có địa điểm');
        this.blockUI.stop();
        return;
      }
      // Nếu có dữ liệu về site array thì xử lý tiếp.
      this.recusiveMenu(res.site_array);
      this.siteFilterModel = this.menuTree.find(item => item.enables === '1');
      this.getData();
    }, (error) => {
      this.notifier.notify('error', this.language.khong_the_ket_noi_may_chu);
      this.blockUI.stop();
    });
  }
  // lấy data thông thường
  getData() {
    if (!this.blockUI.isActive) {
      this.blockUI.start(this.language.dang_tai_du_lieu);
    }
    this.setDefaultCrud(false);
    const data = {
      organization_id: this.organizationId
      , site_id: this.siteFilterModel.id
      , deleted: this.optionDelete
    };
    const url = environment.API.terminal.getListTerminalWithConfig;
    this.appservice.post(data, url).subscribe(res => {
      console.log(res);
      if (res.status !== 1) {
        this.notifier.notify('error', language.co_loi_xay_ra);
        return;
      }
      this.recordDate = res.recordDate;
      this.updateState('retrieve', res.terminalArray);
      if (this.siteFilterModel.store === '1' && this.optionDelete === 0) {
        this.setDefaultCrud(true);
      }
      this.locationArray = res.locationArray.map(function (e: any) {
        const newItem = {
          label: e.location_name + ' - ' + e.module_name
          , value: String(e.id)
          , site_id: e.site_id
        };
        return newItem;
      });
      console.log(this.locationArray);
    },
      (error) => {
        console.log(error);
        this.notifier.notify('error', this.language.khong_the_ket_noi_may_chu);
      }).add(() => {
        this.blockUI.stop();
      });
  }
  // thêm thiết bị
  createNewItem(item) {
    if (item.invalid) {
      this.notifier.notify('error', this.language.du_lieu_khong_phu_hop);
      return;
    }
    const url = environment.API.terminal.createNewTerminal;
    const location_id = item.value.location_id;
    const data = {
      ...item.value
      , location_name: this.locationArray.find(e => e.value === location_id).label
      , organization_id: this.organizationId
      , site_id: this.siteSelected.id
      , site_name: this.siteSelected.site_name
    };
    // xét error về rỗng.
    this.errorArray = [];
    this.blockUI.start(this.language.dang_xu_ly_du_lieu);
    this.appservice.post(data, url).subscribe(
      res => {
        console.log('dữ liệu gửi về', res);
        if (res.status === 1) {
          const insertedData = res.insertedData;
          insertedData.id = insertedData.guid;
          delete insertedData.guid;
          this.updateState(environment.STATE.insert, res.insertedData);
          this.modalRef.hide();
        } else {
          this.errorArray = this.appservice.validate_error(res);
          // console.log(this.errorArray);
        }
      },
      (error) => {
        this.errorArray.push(this.language.khong_the_ket_noi_may_chu);
      }).add(() => {
        this.blockUI.stop();
      });
  }
  preventChange() {
    this.modalRef.hide();
    this.notifier.notify('error', this.language.loi_du_lieu_khong_the_thay_doi);
  }
  change_site_seleted(item: any) {
    if (!environment.production) {
      console.log('id', item);
    }
    if (item.store === '0' || item.enables === '0') {
      this.modalRef.hide();
      this.notifier.notify('error', this.language.co_loi_xay_ra);
      return;
    }
    this.siteSelected = item;
    this.siteTreeDisplay = false;
    this.locationSelected = this.locationArray.filter(e => Number(e.site_id) === Number(item.id));
    console.log(this.locationArray);
  }
  // cập nhật thiết bị
  updateItem(item) {
    console.log(item);
    if (item.invalid || !this.siteSelected) {
      this.notifier.notify('error', this.language.du_lieu_khong_phu_hop);
      return;
    }
    // Nếu như serial number không sửa
    if (!item.controls.serial_number.dirty) {
      delete item.value.serial_number;
    }
    this.errorArray = [];
    this.blockUI.start(this.language.dang_xu_ly_du_lieu);
    const location_id = item.value.location_id;
    const data = {
      ...item.value
      , id: this.dataUpdate.id
      , site_id: this.siteSelected.id
      , site_name: this.siteSelected.site_name
      , location_name: this.locationArray.find(e => e.value === location_id).label
    };
    const url = environment.API.terminal.updateTerminal;
    this.appservice.post(data, url).subscribe(
      res => {
        if (!environment.production) {
          console.log('dữ liệu gửi về', res);
        }
        if (res.status === 1) {
          this.notifier.notify('success', 'Cập nhật thành công');
          // const updatedData = res.updatedData;
          // updatedData.id = updatedData.guid;
          // delete updatedData.guid;
          // this.updateState(environment.STATE.update, res.updatedData);
          this.getData();
          // if (this.connectSocketIo) {
          //   const dataToEmit = {
          //     id: data.id
          //     , serial_number: data.serial_number
          //     , site_id: data.site_id
          //     , organization_id: this.organization_id
          //     , location_id: data.location_id
          //     , location_name: data.location_name
          //     , type: 'update'
          //   };
          //   console.log(dataToEmit);
          //   console.log(data);
          //   this.socket.emit('poc_horizon_reload_data_from_web', dataToEmit);
          // }
          // delete res.updatedData.id;
          // const transData = { ...res.updatedData, id: res.updatedData.gid };
          // this.updateState(environment.STATE.update, transData);
          this.modalRef.hide();
        } else {
          this.errorArray = this.appservice.validate_error(res);
        }
      },
      (error) => {
        this.errorArray.push(this.language.khong_the_ket_noi_may_chu);
      }).add(() => {
        this.blockUI.stop();
      });
  }
  search_table(searchString: string) {
    this.tu_khoa = searchString;
    this.updateState(environment.STATE.search);
  }
  softDeleteItem() {
    this.blockUI.start(this.language.dang_xu_ly_du_lieu);
    const url = environment.API.terminal.softDeleteTerminal;
    const data = {
      id: this.deleteItem.id
      , deleted: this.deleteItem.deleted
    };
    this.appservice.post(data, url).subscribe(
      param => {
        if (param.status === 1) {
          this.updateState('delete', this.deleteItem);
          // if (this.connectSocketIo) {
          //   const dataToEmit = {
          //     id: this.delete_object.id
          //     , serial_number: this.delete_object.serial_number
          //     , site_id: this.delete_object.site_id
          //     , organization_id: this.organization_id
          //     , type: 'delete'
          //   };
          //   this.socket.emit('poc_horizon_reload_data_from_web', dataToEmit);
          // }
        } else {
          this.notifier.notify('error', this.language.co_loi_xay_ra);
        }
      },
      (error) => {
        this.notifier.notify('error', this.language.khong_the_ket_noi_may_chu);
      }).add(() => {
        this.modalRef.hide();
        this.blockUI.stop();
      });
  }
  deleteCurrentItem(reEnterSnInput: any) {
    if (reEnterSnInput.value !== this.deleteItem.serial_number) {
      alert('Serial Number không trùng khớp');
      return;
    }
    this.blockUI.start(this.language.dang_xu_ly_du_lieu);
    const url = environment.API.terminal.deleteTerminal;
    const data = {
      id: this.deleteItem.id
    };
    this.appservice.post(data, url).subscribe(
      param => {
        if (param.status === 1) {
          this.updateState(environment.STATE.delete, this.deleteItem);
        } else {
          this.notifier.notify('error', this.language.co_loi_xay_ra);
        }
      },
      (error) => {
        this.notifier.notify('error', this.language.khong_the_ket_noi_may_chu);
      }).add(() => {
        this.modalRef.hide();
        this.blockUI.stop();
      });
  }
  ngOnDestroy() {
    this.webState.complete();
  }
}
