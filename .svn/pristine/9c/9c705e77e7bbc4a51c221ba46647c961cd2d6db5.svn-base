import { Component, OnInit, ViewChild, ElementRef, TemplateRef, OnDestroy } from '@angular/core';
// import { Router } from '@angular/router';
import { environment } from '../../../../../environments/environment';
import { AppService } from '../../../../app.service';
import * as io from 'socket.io-client';
// Import BlockUI decorator & optional NgBlockUI type
import { BlockUI, NgBlockUI } from 'ng-block-ui';
// chỉnh css angular
import { ViewEncapsulation } from '@angular/core';
// import { ActivatedRoute } from '@angular/router';
// import Modal
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { GeneralMenuComponent } from '../../../viewchild/generalmenu/generalmenu.component';
import { NotifierService } from 'angular-notifier';
import { BehaviorSubject, Subscription, Observable } from 'rxjs';
import { language } from '../../admin_language';
import { language_en } from '../../admin_language_en';
import { FormGroup } from '@angular/forms';
import { IOption } from 'ng-select';
import { Router, ActivatedRoute } from '@angular/router';
// import { NG2DataTableModule } from "angular2-datatable-pagination";

@Component({
  templateUrl: './companies.component.html',
  styleUrls: ['./companies.component.css'],
  // chỉnh css angular
  encapsulation: ViewEncapsulation.None
})
@ViewChild(GeneralMenuComponent)
export class CompaniesComponent implements OnInit, OnDestroy {
  @ViewChild('dataTable') table: ElementRef;
  @ViewChild('searchForm') searchForm: FormGroup;
  @BlockUI() blockUI: NgBlockUI;
  private readonly notifier: NotifierService;
  private subcription: any;
  canAdd: boolean;
  canUpdate: boolean;
  // Khai báo kiểu dữ kiệu
  data: Array<any>;
  dataFilter: Array<any>;
  dataUpdate: any;
  orgArray: Array<IOption>;
  modalRef: BsModalRef;
  siteSelectionDisplay = false;
  rowsOnPage = 15;
  menuTree: Array<any>;
  webState: BehaviorSubject<any>;
  oldState: string;
  // userLogged = JSON.parse(localStorage.getItem(environment.UserLoged));
  errorArray: Array<string>;
  optionDelete: any;
  moduleArray: Array<any>;
  language: any;
  isSuperAdmin: boolean;
  errorMess: string;
  isOnload: boolean;
  defaultModel = environment.API.organization;
  indexArray: Array<any>;
  dropdownSettings: any;
  imageView: any;
  imageUpload: any;

  constructor(private router: Router,
    private route: ActivatedRoute,
    notifierService: NotifierService,
    private appservice: AppService,
    private modalService: BsModalService) {
    this.notifier = notifierService;
  }

  ngOnInit(): void {
    const firstState = {
      data: null
      , state: null
    };
    this.webState = new BehaviorSubject(firstState);
    this.language = this.appservice.getLanguage();
    console.log(this.language);
    this.setDefaultValue();
    this.watchStateChange();
    this.setDefaultPermission(false);
    this.getData();
  }
  setDefaultPermission(bool: boolean) {
    this.canAdd = bool;
  }
  watchStateChange() {
    this.subcription = this.webState.asObservable();
    this.subcription.subscribe(res => {
      const currentState = res.state;
      const item = res.data;
      // Đây là sự kiện khi vừa load trang get data về
      if (currentState === environment.STATE.retrieve) {
        // Sự kiện nhận dữ liệu về thì bỏ hành động tìm kiếm trước đó
        this.data = item;
        this.dataFilter = this.data;
        // Nếu là sự kiện thêm mới
      } else if (currentState === environment.STATE.insert) {
        this.data.unshift(item);
        // Nếu trạng thái trước đó là search
        this.notifier.notify('success', this.language.them_moi_thanh_cong);
        if (this.oldState === environment.STATE.search) {
          this.updateState(environment.STATE.search);
        }
        // nếu là sự kiện sửa
      } else if (currentState === environment.STATE.update) {
        for (let i = 0; i < this.data.length; i++) {
          if (Number(this.data[i].id) === Number(item.id)) {
            this.data[i] = item;
            break;
          }
        }
        this.notifier.notify('success', this.language.cap_nhat_thanh_cong);
        // Nếu trạng thái trước đó là search
        if (this.oldState === environment.STATE.search) {
          this.updateState(environment.STATE.search);
        }
        // Nếu là sự kiện xóa
      } else if (currentState === environment.STATE.delete) {
        this.data.splice(this.data.findIndex(e => e.id === item.id), 1);
        // Nếu trạng thái trước đó là search
        this.notifier.notify('success', this.language.xoa_thanh_cong);
        if (this.oldState === environment.STATE.search) {
          this.updateState(environment.STATE.search);
        }
        // Nếu có sự kiện tìm kiếm
      } else if (currentState === environment.STATE.search) {
        let oldData = this.data;
        const inputData = this.searchForm.value;
        // tslint:disable-next-line: forin
        for (const key in inputData) {
          if (inputData[key]) {
            const lowerStr = inputData[key] !== null ? inputData[key].toLowerCase() : null;
            oldData = oldData.filter((e: any) => e.hasOwnProperty(key) && (inputData[key] === ''
              || e[key].toLowerCase().indexOf(lowerStr) !== -1));
          }
        }
        // console.log('oldData', oldData);
        this.dataFilter = oldData;
      }
    });
  }
  updateState(stateString: string, data = null) {
    const stateWithData = {
      state: stateString
      , data: data
    };
    const oldStateObj = this.webState.getValue();
    this.oldState = oldStateObj.state;
    this.webState.next(stateWithData);
  }
  setDefaultValue() {
    this.dropdownSettings = {
      singleSelection: false,
      idField: 'item_id',
      textField: 'item_label',
      selectAllText: this.language.chon_tat_ca,
      unSelectAllText: this.language.bo_chon_tat_ca,
      itemsShowLimit: 3,
      allowSearchFilter: true
    };
    this.imageView = null;
    this.imageUpload = null;
    this.isSuperAdmin = false;
    this.canUpdate = false;
    this.dataFilter = [];
    this.data = [];
    this.dataUpdate = null;
    this.errorArray = [];
    this.optionDelete = 0;
    this.moduleArray = [];
    this.errorMess = null;
    this.isOnload = true;
    this.indexArray = [];
  }
  getData() {
    this.blockUI.start(this.language.dang_tai_du_lieu);
    const data = {
      deleted: this.optionDelete
    };
    this.menuTree = [];
    const url = this.defaultModel.getData;
    this.appservice.post(data, url).subscribe(res => {
      if (res.status !== 1) {
        this.errorMess = this.language.co_loi_xay_ra;
        return;
      }
      this.setDefaultPermission(true);
      this.isSuperAdmin = res.isSuperAdmin;
      this.updateState('retrieve', res.retrieveData);
      this.canUpdate = res.canUpdateData;
      this.indexArray = res.indexArray;
    },
      (error) => {
        console.log(error);
        this.errorMess = this.language.khong_the_ket_noi_may_chu;
      }).add(() => {
        this.isOnload = false;
        this.blockUI.stop();
      });
  }
  // mở modal thêm mới dữ liệu
  openPopupAddItem(templates: TemplateRef<any>) {
    this.modalRef = this.modalService.show(templates, {
      backdrop: true,
      ignoreBackdropClick: true
    });
    this.errorArray = [];
    this.imageUpload = null;
    this.imageView = null;
  }
  openPopupUpdateCurrentItem(item: any, template: TemplateRef<any>) {
    console.log('data_item', item);
    this.dataUpdate = Object.assign({}, item);
    this.errorArray = []; // reset Error
    this.modalRef = this.modalService.show(template, {
      backdrop: true,
      ignoreBackdropClick: true
    });
  }

  addNewItem(item) {
    if (item.invalid) {
      this.notifier.notify('error', this.language.du_lieu_khong_phu_hop);
      return;
    }
    const data = { ...item.value };
    // xét error về rỗng.
    this.errorArray = [];
    this.blockUI.start(this.language.dang_tai_du_lieu);
    const url = this.defaultModel.insert;
    this.appservice.post(data, url).subscribe(
      res => {
        if (res.status === 1) {
          const insertedData = res.insertedData;
          this.updateState(environment.STATE.insert, insertedData);
          this.modalRef.hide();
        } else {
          this.errorArray = this.appservice.validate_error(res);
          // console.log(this.errorArray);
        }
      },
      (error) => {
        this.errorArray = [this.language.khong_the_ket_noi_may_chu_vui_long];
      }).add(() => {
        this.blockUI.stop();
      });
  }
  // cập nhật thiết bị
  updateCurrentItem(item) {
    if (item.invalid) {
      this.notifier.notify('error', this.language.du_lieu_khong_phu_hop);
      return;
    }
    this.errorArray = [];
    this.blockUI.start(this.language.dang_tai_du_lieu);
    const data = { ...item.value, id: this.dataUpdate.id };
    const url = this.defaultModel.update;
    this.appservice.post(data, url).subscribe(
      res => {
        console.log('dữ liệu gửi về', res);
        if (res.status === 1) {
          const updatedData = res.updatedData;
          this.updateState(environment.STATE.update, updatedData);
          this.modalRef.hide();
        } else {
          this.errorArray = this.appservice.validate_error(res);
        }
      },
      (error) => {
        this.errorArray = [this.language.khong_the_ket_noi_may_chu_vui_long];
      }).add(() => {
        this.blockUI.stop();
      });
  }
  preventChange() {
    this.modalRef.hide();
    this.notifier.notify('error', this.language.du_lieu_khong_phu_hop);
  }
  submitToSearch(form: any) {
    const inputData = form.value; // Where
    console.log(inputData);
    this.updateState(environment.STATE.search, inputData);
  }
  uploadimagequality(target: any) {
    this.errorArray = [];
    const file = target.files;
    const fileload = file[0];
    const reader = new FileReader();
    const newImage = new Image();
    // hiện ảnh
    console.log(newImage);
    newImage.onload = e => {
      if (newImage.height <= this.appservice.uploadImageHeight && newImage.width <= this.appservice.uploadImageWidth) {
        reader.readAsDataURL(fileload);
      } else {
        this.errorArray = ['Kích thước ảnh không hợp lệ'];
        this.imageUpload = null;
        this.imageView = null;
        target.value = '';
      }
    };
    newImage.src = window.URL.createObjectURL(fileload);
    // hiện ảnh
    reader.onload = e => {
      this.imageUpload = file.item(0);
      this.imageView = reader.result;
    };
  }
  ngOnDestroy() {
    this.webState.complete();
  }
}

// export class CompaniesComponent implements OnInit, OnDestroy {
//   @BlockUI() blockUI: NgBlockUI;
//   canAddNew: boolean;
//   module_update: any;
//   private socket: SocketIOClient.Socket;
//   connectSocketIo = localStorage.getItem('connectSocketIo') === '1';
//   private readonly notifier: NotifierService;
//   option_deleted: number;
//   dataUpdate: any;
//   // Khai báo kiểu dữ kiệu
//   organization: any;
//   data: Array<any>;
//   public modalRef: BsModalRef;
//   isSuperAdmin: boolean;
//   user_info = JSON.parse(localStorage.getItem(environment.UserLoged));
//   modulelist: Array<any>;
//   dropdownSettings: any;
//   is_admin_organization = JSON.parse(localStorage.getItem(environment.is_admin_organization));
//   dataFilter: Array<any>;
//   organization_id: any;
//   private subcription: Observable<any>;
//   webState: BehaviorSubject<any>;
//   tu_khoa: string;
//   oldState: string;
//   errorArray: Array<any>;
//   type_language = JSON.parse(localStorage.getItem(environment.language));
//   language: any;
//   subcriber: Subscription;
//   canUpdate: boolean;

//   constructor(
//     // private router: Router
//     // , private route: ActivatedRoute
//     public appservice: AppService
//     , private modalService: BsModalService
//     , notifierService: NotifierService) {
//     this.type_language === 'vn' ? this.language = language : this.language = language_en;
//     this.dropdownSettings = {
//       singleSelection: false,
//       idField: 'item_id',
//       textField: 'item_label',
//       selectAllText: this.language.chon_tat_ca,
//       unSelectAllText: this.language.bo_chon_tat_ca,
//       itemsShowLimit: 3,
//       allowSearchFilter: true
//     };
//     this.notifier = notifierService;
//     if (this.connectSocketIo) {
//       this.socket = io(environment.UrlSocket);
//     }
//   }
//   ngOnInit(): void {
//     const firstState = {
//       data: null
//       , state: null
//     };
//     this.webState = new BehaviorSubject(firstState);
//     this.setDefaultValue();
//     this.watchStateChange();
//     this.getData();
//   }
//   ngOnDestroy(): void {
//     console.log(this.subcriber);
//     this.webState.complete();
//     this.subcriber.unsubscribe();
//   }
//   updateState(stateString: string, data = null) {
//     const stateWithData = {
//       state: stateString
//       , data: data
//     };
//     const oldStateObj = this.webState.getValue();
//     this.oldState = oldStateObj.state;
//     this.webState.next(stateWithData);
//     this.webState.complete();
//   }
//   watchStateChange() {
//     this.subcription = this.webState.asObservable();
//     this.subcription.subscribe(res => {
//       console.log(res.state);
//       const currentState = res.state;
//       const item = res.data;
//       // Đây là sự kiện khi vừa load trang get data về
//       if (currentState === environment.STATE.retrieve) {
//         // Sự kiện nhận dữ liệu về thì bỏ hành động tìm kiếm trước đó
//         this.data = item;
//         this.dataFilter = this.data;
//         // Nếu là sự kiện thêm mới
//       } else if (currentState === environment.STATE.insert) {
//         this.data.push(item);
//         // Nếu trạng thái trước đó là search
//         if (this.oldState === environment.STATE.search) {
//           this.updateState(environment.STATE.search);
//         }
//         this.notifier.notify('success', this.language.them_moi_thanh_cong);
//         // nếu là sự kiện sửa
//       } else if (currentState === environment.STATE.update) {
//         for (let i = 0; i < this.data.length; i++) {
//           if (Number(this.data[i].id) === Number(item.id)) {
//             this.data[i] = item;
//             break;
//           }
//         }
//         // Nếu trạng thái trước đó là search
//         if (this.oldState === environment.STATE.search) {
//           this.updateState(environment.STATE.search);
//         }
//         this.notifier.notify('success', this.language.cap_nhat_thanh_cong);
//         // Nếu là sự kiện xóa
//       } else if (currentState === environment.STATE.delete) {
//         this.data.splice(this.data.findIndex(e => e.id === item.id), 1);
//         // Nếu trạng thái trước đó là search
//         if (this.oldState === environment.STATE.search) {
//           this.updateState(environment.STATE.search);
//         }
//         this.notifier.notify('success', this.language.xoa_thanh_cong);
//         // Nếu có sự kiện tìm kiếm
//       } else if (currentState === environment.STATE.search) {
//         const string = this.tu_khoa ? this.tu_khoa.toLowerCase() : '';
//         // console.log(string);
//         if (string === '') {
//           this.dataFilter = this.data;
//         } else {
//           this.dataFilter = this.data.filter(x => x.location_name.toLowerCase().indexOf(string) !== -1);
//         }
//       }
//     }, (error) => {
//       console.log(error);
//     }, () => {
//       console.log(this.tu_khoa);
//       if (this.tu_khoa) {
//         this.updateState(environment.STATE.search);
//       }
//     });
//   }
//   public onPageChange(event) {
//     console.log(event);
//   }
//   setDefaultValue() {
//     this.isSuperAdmin = false;
//     this.option_deleted = 0;
//     this.data = [];
//     this.dataFilter = [];
//     this.dataUpdate = null;
//     this.organization_id = null;
//     this.canAddNew = false;
//     this.canUpdate = false;
//   }
//   // giám sát thiết bị
//   createErrorNotify(message, callback: Function = null) {
//     let default_message = this.language.co_loi_xay_ra;
//     if (this.user_info.lever === '0') {
//       default_message = message;
//     }
//     this.notifier.notify('error', default_message);
//     if (callback) {
//       callback();
//     }
//   }
//   createSuccessNotify(success_string, callback: Function = null) {
//     this.notifier.notify('success', success_string);
//     if (callback) {
//       callback();
//     }
//   }
//   getData() {
//     this.blockUI.start(this.language.dang_tai_du_lieu);
//     const data = {};
//     const url = environment.FBA.Administration.get_organization_filter;
//     this.subcriber = this.appservice.post(data, url).subscribe(
//       param => {
//         if (!environment.production) {
//           // console.log('get_user_page_parametter', param);
//         }
//         if (param.status === 0) {
//           this.notifier.notify('error', this.language.co_loi_xay_ra);
//           return;
//         }
//         this.updateState('retrieve', param.organization_array);
//         this.modulelist = param.index_array;
//         this.canAddNew = true;
//         if (param.canUpdateData) {
//           this.canUpdate = true;
//         }
//         if (param.isSuperAdmin) {
//           this.isSuperAdmin = true;
//         }
//       },
//       (error) => {
//         this.notifier.notify('error', this.language.khong_the_ket_noi_may_chu);
//       }).add(() => {
//         this.blockUI.stop();
//       });
//   }
//   // click hiện modal
//   openModal(templates: TemplateRef<any>) {
//     this.modalRef = this.modalService.show(templates, {
//       backdrop: true,
//       ignoreBackdropClick: true
//     });
//   }
//   show_delete(item: any, templates: TemplateRef<any>) {
//     this.dataUpdate = item;
//     this.openModal(templates);
//   }
//   delete_item() {
//     const data = {
//       id: this.dataUpdate.id
//     };
//     if (!environment.production) {
//       console.log(data);
//     }
//     const url = environment.FBA.Administration.delete_organization;
//     this.blockUI.start(this.language.dang_xu_ly_du_lieu);
//     this.subcriber = this.appservice.post(data, url).subscribe(
//       res => {
//         if (res.message === 1) {
//           this.updateState(environment.STATE.delete, data);
//         } else {
//           this.notifier.notify('error', this.language.co_loi_xay_ra);
//         }
//       }, (error) => {
//         this.notifier.notify('error', this.language.khong_the_ket_noi_may_chu);
//       }).add(() => {
//         this.blockUI.stop();
//         this.modalRef.hide();
//       });
//   }
//   show_insert(templates: TemplateRef<any>): void {
//     this.errorArray = [];
//     this['ImageUrll' + 1] = null;
//     this['ImageUrl' + 1] = null;
//     this.openModal(templates);
//   }
//   preventChange() {
//     this.modalRef.hide();
//     this.notifier.notify('error', this.language.loi_du_lieu_khong_the_thay_doi);
//   }
//   // truyền dữ liệu popup
//   showPopupEdit(item, template: TemplateRef<any>) {
//     this.errorArray = [];
//     this.dataUpdate = item;
//     this.openModal(template);
//     // const url = environment.FBA.Administration.update_organization + '_get';
//     // this.blockUI.start(this.language.dang_tai_du_lieu);
//     // this.subcriber = this.appservice.post(item, url).subscribe(para => {
//     //   this.dataUpdate = para.organization_array;
//     //   if (para.getModule.length === 0) {
//     //     this.notifier.notify('error',
//     //       'Tổ chức không có dữ liệu về phân quyền. Quá trình phân quyền đã xảy ra lỗi. Tổ chức không thể hoạt động');
//     //     return;
//     //   }
//     //   this.module_update = para.getModule;
//     //   this.openModal(template);
//     //   this['ImageUrll' + 2] = null;
//     //   this['ImageUrl' + 2] = null;
//     // },
//     //   (error) => {
//     //     this.notifier.notify('error', this.language.khong_the_ket_noi_may_chu);
//     //   }).add(() => {
//     //     this.blockUI.stop();
//     //   });
//   }
//   // upload ảnh chất lượng đánh giá
//   uploadimagequality(target: any, number: Number) {
//     this.errorArray = [];
//     const file = target.files;
//     const fileload = file[0];
//     const reader = new FileReader();
//     const newImage = new Image();
//     // hiện ảnh
//     newImage.onload = e => {
//       if (newImage.height <= this.appservice.uploadImageHeight && newImage.width <= this.appservice.uploadImageWidth) {
//         reader.readAsDataURL(fileload);
//       } else {
//         this.errorArray = ['Kích thước ảnh không hợp lệ'];
//         this['ImageUrll' + number] = null;
//         this['ImageUrl' + number] = null;
//         target.value = '';
//       }
//     };
//     newImage.src = window.URL.createObjectURL(fileload);
//     // hiện ảnh
//     reader.onload = e => {
//       this['ImageUrll' + number] = reader.result;
//       this['ImageUrl' + number] = file.item(0);
//     };
//   }
//   updateform(item) {
//     this.errorArray = [];
//     this.blockUI.start(this.language.dang_xu_ly_du_lieu);
//     console.log('dữ liệu gửi đi', item.value);
//     if (item.invalid) {
//       this.modalRef.hide();
//       this.notifier.notify('error', this.language.du_lieu_khong_phu_hop);
//     }
//     if (!item.controls.organization_code.dirty) {
//       delete item.value.organization_code;
//     }
//     const data: FormData = new FormData();
//     if (this['ImageUrl' + 2]) {
//       data.append('company_logo', this['ImageUrl' + 2], this['ImageUrl' + 2].name);
//     }
//     data.append('data', JSON.stringify(item.value));
//     this.subcriber = this.appservice.post(data, environment.FBA.Administration.update_organization).subscribe(
//       para => {
//         console.log('dữ liệu gửi về', para);
//         if (para.message === 1) {
//           this.updateState(environment.STATE.update, para.updatedData);
//           if (this.connectSocketIo) {
//             const dataToEmit = {
//               organization_id: para.updatedData.id
//               , tocken_type: environment.Bearer
//               , access_token: localStorage.getItem(environment.access_token)
//             };
//             this.socket.emit('fba_tablet_reload_data', dataToEmit);
//           }
//           this.modalRef.hide();
//         } else {
//           this.errorArray = this.appservice.validate_error(para);
//         }
//       },
//       (error) => {
//         this.errorArray = [this.language.khong_the_ket_noi_may_chu];
//       }).add(() => {
//         this.blockUI.stop();
//       });
//   }

//   insertform(item) {
//     if (item.invalid) {
//       this.modalRef.hide();
//       this.notifier.notify('error', this.language.du_lieu_khong_phu_hop);
//       return;
//     }
//     this.blockUI.start(this.language.dang_xu_ly_du_lieu);
//     console.log('dữ liệu gửi đi', item.value);
//     this.errorArray = []; // Reset error
//     const data: FormData = new FormData();
//     data.append('data', JSON.stringify(item.value));
//     if (this['ImageUrl' + 1]) {
//       data.append('company_logo', this['ImageUrl' + 1], this['ImageUrl' + 1].name);
//     }
//     this.subcriber = this.appservice.post(data, environment.FBA.Administration.insert_organization).subscribe(
//       res => {
//         console.log('dữ liệu gửi về', res);
//         if (res.status === 1) {
//           this.updateState(environment.STATE.insert, res.insertedData);
//           this.modalRef.hide();
//         } else {
//           this.errorArray = this.appservice.validate_error(res);
//         }
//       },
//       (error) => {
//         this.errorArray = [this.language.khong_the_ket_noi_may_chu];
//       }).add(() => {
//         this.blockUI.stop();
//       });
//   }
// }



