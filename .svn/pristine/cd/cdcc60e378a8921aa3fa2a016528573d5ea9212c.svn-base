import { IOption } from 'ng-select';   // select option <option>
import {
  trigger,
  state,
  style,
  animate,
  transition,
  sequence,
} from '@angular/animations';
import { Component, OnInit, ViewChild, ElementRef, TemplateRef, OnDestroy } from '@angular/core';
import { Router } from '@angular/router';
import { environment } from '../../../../../environments/environment';
import { AppService } from '../../../../app.service';

// Import BlockUI decorator & optional NgBlockUI type
import { BlockUI, NgBlockUI } from 'ng-block-ui';

// chỉnh css angular
import { ViewEncapsulation } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import 'rxjs/add/operator/map';
// import Modal
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
// import validate form
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { PasswordValidation } from './users-form.validator';
import { GeneralMenuComponent } from '../../../viewchild/generalmenu/generalmenu.component';
// import notification
import { NotifierService } from 'angular-notifier';
import { Subject, BehaviorSubject, Subscription } from 'rxjs';

@Component({
  templateUrl: './users.component.html',
  styleUrls: ['./users.component.css'],
  // chỉnh css angular
  encapsulation: ViewEncapsulation.None,
  animations: [
    trigger('openClose', [
      transition('* => void', [
        style({ height: '*', opacity: '1' }),
        sequence([
          animate('.25s ease', style({ height: '*', opacity: '.2' })),
          animate('.1s ease', style({ height: '0', opacity: 0 }))
        ])
      ]),
      transition('void => active', [
        style({ height: '0', opacity: '0', transform: 'translateX(20px)', 'box-shadow': 'none' }),
        sequence([
          animate('.1s ease', style({ height: '*', opacity: '.2', transform: 'translateX(20px)', 'box-shadow': 'none' })),
          animate('.35s ease'
            , style({ height: '*', opacity: 1, transform: 'translateX(0)', 'box-shadow': '0 1px 4px 0 rgba(0, 0, 0, 0.3)' }))
        ])
      ])
    ])
  ]
})
@ViewChild(GeneralMenuComponent)
export class UsersComponent implements OnInit, OnDestroy {
  page_id = '\'' + environment.Pages.administration.users + '\'';
  @ViewChild('dataTable') table: ElementRef;
  @BlockUI() blockUI: NgBlockUI;
  id_deleted: number;
  private readonly notifier: NotifierService;
  snap_user: any;
  error_array: any;
  can_search: boolean;
  showSelectCrud: boolean;
  webState: BehaviorSubject<any>;
  subcription: any;
  can_add: boolean;
  can_edit: boolean;
  can_delete: boolean;
  can_restore: boolean;
  // Khai báo kiểu dữ kiệu
  form: FormGroup;
  user_organization: any;
  organization_arr_option: Array<IOption>;
  organization_arr: Array<IOption>;
  org_selected: string;
  org_selectedform: string;
  tu_khoa: string;
  data2: any;
  info_user: any;
  public modalRef: BsModalRef;
  lever_arr: any[];
  lever: string;
  email_logs: any;
  userlogged = JSON.parse(localStorage.getItem(environment.UserLoged));
  is_admin_of_organization = JSON.parse(localStorage.getItem(environment.is_admin_organization));
  config = {
    backdrop: true,
    ignoreBackdropClick: true
  };
  option_delete = 0;
  idStatusDelete: any;
  errorDisplayMessage: string;
  constructor(private router: Router,
    private route: ActivatedRoute,
    private appservice: AppService,
    notifierService: NotifierService,
    private modalService: BsModalService,
    private fb: FormBuilder) {
    this.notifier = notifierService;
  }
  ngOnInit(): void {
    const firstState = {
      data: null
      , state: null
    };
    this.webState = new BehaviorSubject(firstState);
    this.set_default_crud(false);
    this.setDefaultValue();
    this.watchStateChange();
    // this.tu_khoa = '';
    this.get_organization();
  }
  setDefaultValue() {
    this.user_organization = [];
    this.snap_user = [];
    this.errorDisplayMessage = null;
    this.data2 = null;
    this.error_array = [];
  }
  watchStateChange() {
    this.subcription = this.webState.asObservable();
    this.subcription.subscribe(res => {
      const oldState = this.webState.getValue();
      const currentState = res.state;
      const item = res.data;
      // console.log('trạng thái trước', oldState);
      // console.log('trạng thái hiện tại', currentState);
      // Đây là sự kiện khi vừa load trang get data về
      if (currentState === environment.STATE.retrieve) {
        // Sự kiện nhận dữ liệu về thì bỏ hành động tìm kiếm trước đó
        this.tu_khoa = null;
        this.snap_user = item;
        this.user_organization = this.snap_user;
        // Nếu là sự kiện thêm mới
      } else if (currentState === environment.STATE.insert) {
        this.snap_user.push(item);
        // Nếu trạng thái trước đó là search
        // if (oldState === environment.STATE.search) {
        this.updateState(environment.STATE.search);
        // }
        this.notifier.notify('success', 'Thêm mới dữ liệu thành công');
        // nếu là sự kiện sửa
      } else if (currentState === environment.STATE.update) {
        for (let i = 0; i < this.snap_user.length; i++) {
          if (Number(this.snap_user[i].id) === Number(item.id)) {
            this.snap_user[i] = item;
            break;
          }
        }
        // Nếu trạng thái trước đó là search
        // if (oldState === environment.STATE.search) {
        this.updateState(environment.STATE.search);
        // }
        this.notifier.notify('success', 'Cập nhật dữ liệu thành công');
        // Nếu là sự kiện xóa
      } else if (currentState === environment.STATE.delete) {
        this.snap_user.splice(this.snap_user.findIndex(e => e.id === item.id), 1);
        // Nếu trạng thái trước đó là search
        // if (oldState === environment.STATE.search) {
        this.updateState(environment.STATE.search);
        // }
        this.notifier.notify('success', 'Xóa dữ liệu thành công');
        // Nếu có sự kiện tìm kiếm
      } else if (currentState === environment.STATE.search) {
        const string = this.tu_khoa ? this.tu_khoa.toLowerCase() : '';
        // console.log(string);
        if (string === '') {
          this.user_organization = this.snap_user;
        } else {
          this.user_organization = this.snap_user.filter(x => x.email.toLowerCase().indexOf(string) !== -1);
        }
      } else if (currentState === 'resetpassword') {
        if (this.option_delete === 1) {
          this.snap_user.splice(this.snap_user.findIndex(e => e.id === item.id), 1);
          this.updateState(environment.STATE.search);
          // this.notifier.notify('success', 'Gửi mật khẩu mới thành công');
        }
        this.notifier.notify('success', 'Gửi mật khẩu mới thành công');
      }
    });
  }
  showSelectFunc() {
    this.showSelectCrud = false;
    const lever = Number(this.userlogged.lever);
    const org_id = Number(this.userlogged.organization_id);
    if (lever === 0 && org_id === 0) {
      this.showSelectCrud = true;
    }
  }
  set_default_crud(bool: boolean) {
    // Nếu là bật, check xem có phải là delete = 1
    if (bool) {
      if (Number(this.option_delete) === 0) {
        this.can_add = true;
      } else {
        this.can_add = false;
      }
    } else { // Nếu là tắt
      this.can_add = bool;
    }
    this.can_search = bool;
  }
  show_dialog(dialog: TemplateRef<any>, item: any) {
    this.modalRef = this.modalService.show(dialog, this.config);
    this.id_deleted = item.id;
    this.idStatusDelete = item.deleted;
  }
  updateState(stateString: string, data = null) {
    const stateWithData = {
      state: stateString
      , data: data
    };
    this.webState.next(stateWithData);
    // return returnData;
  }
  // Lấy thông tin tổ chức lên ng-select
  get_organization() {
    this.blockUI.start('Đang tải dữ liệu...');
    const url = environment.API.userGetOrg;
    this.appservice.get(url).subscribe(
      param => {
        if (!environment.production) {
          // console.log('get_user_page_parametter', param);
        }
        if ('message' in param) {
          this.notifier.notify('error', 'Đã có lỗi xảy ra');
          return;
        }
        const org = param.organization_arr.slice(0);
        this.organization_arr = org;
        this.org_selectedform = param.organization_arr[0].value;
        this.get_data();
      },
      (error) => {
        if (!environment.production) {
          // console.log(error);
        }
        this.notifier.notify('error', 'Đã có lỗi xảy ra');
        this.blockUI.stop();
      });
  }
  // // click hiện thêm mới
  openModal(template: TemplateRef<any>) {
    this.error_array = [];
    this.modalRef = this.modalService.show(template, this.config);
  }
  get_insert(template: TemplateRef<any>) {
    this.openModal(template);
  }
  clone_array(array: any[]) {
    return array.slice(0);
  }
  // truyền dữ liệu popup
  dulieuthaydoi(item, templates: TemplateRef<any>) {
    if (!environment.production) {
      // console.log('data thay đổi', item);
    }
    this.error_array = [];
    this.data2 = Object.assign({}, item);
    this.modalRef = this.modalService.show(templates, this.config);
  }
  // show modal mật khẩu
  show_dialog_(item, password: TemplateRef<any>) {
    if (!environment.production) {
      // console.log('data thay đổi', item);
    }
    this.data2 = Object.assign({}, item);
    console.log(this.data2);
    this.modalRef = this.modalService.show(password, this.config);
  }
  //  thay đổi tổ chức
  thaydoitochuc(event) {
    if (!environment.production) {
      // console.log('id', event.value);
    }
    this.org_selectedform = event.value;
    this.tu_khoa = '';
    this.get_data();
  }
  // Hàm tìm kiếm menu
  search_user() {
    this.updateState(environment.STATE.search);
  }
  // lấy data thông thường
  get_data() {
    this.blockUI.start('Đang tải dữ liệu...');
    const data = {
      organization_id: this.org_selectedform
      , deleted: this.option_delete
    };
    if (!environment.production) {
      // console.log('data gửi đi', data);
    }
    this.appservice.post(data, environment.FBA.Administration.get_users).subscribe(res => {
      if (!environment.production) {
        // console.log(res);
      }
      this.set_default_crud(true);
      this.updateState('retrieve', res.user_array);
    },
      (error) => {
        if (!environment.production) {
          // console.log(error);
        }
        this.notifier.notify('error', 'Đã có lỗi xảy ra');
      }).add(() => {
        this.blockUI.stop();
      });
  }
  // Thêm mới users
  insertform(item: any) {
    if (item.invalid) {
      // console.log(item);
      this.notifier.notify('error', 'Nhập liệu gặp sự cố');
      return;
    }
    // xét error về rỗng.
    this.error_array = [];
    this.blockUI.start('Đang thêm dữ liệu...');
    if (!environment.production) {
      // console.log('dữ liệu gửi đi', item);
    }
    const data = item.value;
    this.appservice.post(data, environment.FBA.Administration.insert_users).subscribe(
      res => {
        if (!environment.production) {
          // console.log('dữ liệu gửi về', res);
        }
        if (res.message === 1) {
          this.updateState(environment.STATE.insert, res.insertedData);
          this.modalRef.hide();
        } else {
          this.error_array = this.appservice.validate_error(res);
          // console.log(this.error_array);
        }
      },
      (error) => {
        this.error_array.push('Không thể kết nối dữ liệu');
      }).add(() => {
        this.blockUI.stop();
      });
  }
  updateform(item) {
    if (item.invalid) {
      // console.log(item);
      this.notifier.notify('error', 'Nhập liệu gặp sự cố');
      return;
    }
    this.error_array = [];
    this.blockUI.start('Đang cập nhật dữ liệu...');
    if (!environment.production) {
      // console.log('dữ liệu gửi đi', item.value);
    }
    if (!item.dirty) {
      this.modalRef.hide();
      this.notifier.notify('warning', 'Thông tin không thay đổi');
      this.blockUI.stop();
      return;
    }
    const data = item.value;
    this.appservice.post(data, environment.FBA.Administration.edit_users).subscribe(
      res => {
        if (!environment.production) {
          // console.log('dữ liệu gửi về', res);
        }
        if (res.message === 1) {
          this.updateState(environment.STATE.update, res.updatedData);
          this.modalRef.hide();
        } else {
          this.error_array = this.appservice.validate_error(res);
          // console.log(this.error_array);
        }
      },
      (error) => {
        if (!environment.production) {
          // console.log(error);
        }
        this.error_array.push('Không thể kết nối dữ liệu');
      }).add(() => {
        this.blockUI.stop();
      });
  }

  preventChange() {
    this.modalRef.hide();
    this.notifier.notify('error', 'Lỗi dữ liệu không được thay đổi');
  }

  send_password_for_user(item) {
    this.blockUI.start('Đang cập nhật dữ liệu...');
    if (!environment.production) {
      console.log('dữ liệu gửi đi', item);
    }
    const data: FormData = new FormData();
    data.append('data', JSON.stringify(item.value));
    // return;
    this.appservice.post(data, environment.FBA.Administration.edit_users + '_and_send_password').subscribe(
      para => {
        if (!environment.production) {
          // console.log('dữ liệu gửi về', para);
        }
        if (para.status === 1) {
          this.updateState('resetpassword', item.value);
          this.modalRef.hide();
        } else {
          this.notifier.notify('error', 'Quá trình gửi xảy ra lỗi');
        }
        // this.get_data();
      }, (error) => {
        if (!environment.production) {
          // console.log(error);
        }
        this.notifier.notify('error', 'Quá trình gửi xảy ra lỗi');
      }).add(() => {
        this.blockUI.stop();
      });
  }
  // xóa users
  delete_users() {
    const data = {
      id: this.id_deleted
      , deleted: this.idStatusDelete
    };
    if (!environment.production) {
      // console.log(data);
    }
    this.blockUI.start('Đang xử lý dữ liệu...');
    this.appservice.post(data, environment.FBA.Administration.delete_users).subscribe(
      param => {
        if (param.message === 1) {
          this.updateState('delete', data);
        } else {
          this.notifier.notify('error', param.message);
        }
        // this.get_data();
      },
      (error) => {
        if (!environment.production) {
          // console.log(error);
        }
        this.notifier.notify('error', 'Đã có lỗi xảy ra');
      }).add(() => {
        this.modalRef.hide();
        this.blockUI.stop();
      });
  }
  ngOnDestroy() {
    this.webState.complete();
    // console.log(this.webState);
  }
}



