import { IOption } from 'ng-select';   // select option <option>

import { Component, OnInit, ViewChild, ElementRef, TemplateRef } from '@angular/core';
import { Router } from '@angular/router';
import { environment } from '../../../../../environments/environment';
import { AppService } from '../../../../app.service';

// Import BlockUI decorator & optional NgBlockUI type
import { BlockUI, NgBlockUI } from 'ng-block-ui';

// chỉnh css angular
import { ViewEncapsulation } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import 'rxjs/add/operator/map';
// import Modal
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
// import validate form
import { FormBuilder, FormGroup, Validators, NgForm } from '@angular/forms';
import { GeneralMenuComponent } from '../../../viewchild/generalmenu/generalmenu.component';

@Component({
  templateUrl: './group.component.html',
  styleUrls: ['./group.component.css'],
  // chỉnh css angular
  encapsulation: ViewEncapsulation.None
})
@ViewChild(GeneralMenuComponent)
export class GroupComponent implements OnInit {
  page_id = '\'' + environment.Pages.administration.users + '\'';
  @ViewChild('dataTable') table: ElementRef;
  @BlockUI() blockUI: NgBlockUI;
  id_deleted: number;
  data: any;
  list_user_1 = [];
  list_user_2 = [];
  list_user_3 = [];
  sites: any;
  check_arr = [];
  check_arr_user = [];
  data_update: any;
  organization_update_id: string;

  constructor(private router: Router,
    private route: ActivatedRoute,
    private appservice: AppService,
    private modalService: BsModalService,
    private fb: FormBuilder) {
    // this.form = fb.group({
    //   password: ['', Validators.required],
    //   confirmPassword: ['', Validators.required],
    //   name: ['', Validators.required],
    //   email: ['', Validators.required],
    //   organization_id: ['', Validators.required],
    //   lever: ['', Validators.required],
    //   recerviced_report: ['', Validators.required],
    //   recerviced_notification: ['', Validators.required],
    //   report_dayly: ['', ''],
    //   report_weekly: ['', ''],
    //   report_monthly: ['', ''],
    // }, {
    //     validator: PasswordValidation.MatchPassword // your validation method
    //   });
  }
  // Khai báo kiểu dữ kiệu
  form: FormGroup;
  user_organization: any;
  organization_arr_option: Array<IOption>;
  organization_arr: Array<IOption>;
  org_selected: string;
  org_selectedform: string;
  tu_khoa: string;
  info_user: any;
  organization_id: number;
  public modalRef: BsModalRef;
  userlogged = JSON.parse(localStorage.getItem(environment.UserLoged));
  lever_arr = [
    { label: 'Quản trị hệ thống', value: '0' },
    { label: 'Thành viên', value: '1' },
    { label: 'Khách hàng', value: '2' },
  ];
  lever = this.lever_arr[0].value;
  any_require = '0'; // true/false
  email_logs: any;

  ngOnInit(): void {
    this.get_location_time();
    // this.org_selected = '';
    // this.tu_khoa = '';
    // this.get_data();
  }
  show_dialog(dialog: TemplateRef<any>, id: number) {
    this.modalRef = this.modalService.show(dialog, {
      backdrop: true,
      ignoreBackdropClick: true
    });
    this.id_deleted = id;
  }
  // Lấy thông tin tổ chức lên ng-select
  get_location_time() {
    this.blockUI.start('Đang tải cấu hình...');
    this.appservice.get_user_page_parametter(this.page_id).subscribe(
      param => {
        if (!environment.production) {
          console.log('get_user_page_parametter', param);
        }
        this.organization_arr = param.organization_arr;
        this.org_selectedform = param.organization_arr[0].value;
      },
      (error) => {
        if (!environment.production) {
          console.log(error);
        }
        this.blockUI.stop();
        this.blockUI.start('Lỗi, không kết nối được máy chủ');
      },
      () => {
        this.blockUI.stop();
        this.get_data();
      }
    );
  }
  // click hiện thêm mới
  openModal(template: TemplateRef<any>) {
    this.check_arr = [];
    this.check_arr_user = [];
    this.blockUI.start('Đang tải dữ liệu...');
    const url = environment.API.group + '_get_user_and_site/' + this.userlogged.organization_id;
    this.appservice.get(url).subscribe(res => {
      if (!environment.production) {
        console.log(res);
      }
      if (!this.appservice.isEmptyObject(res)) {
        this.devide_array(res.users);
        this.sites = [];
        this.ham_dequy(res.sites);
        this.modalRef = this.modalService.show(template, {
          backdrop: true,
          ignoreBackdropClick: true
        });
      }
    },
      (error) => {
        this.blockUI.start('Lỗi không tải được dữ liệu');
        this.blockUI.stop();
        if (!environment.production) {
          console.log(error);
        }
      },
      () => {
        this.blockUI.stop();
      });
  }
  devide_array(resource: any) {
    this.list_user_1 = [];
    this.list_user_2 = [];
    this.list_user_3 = [];
    for (let i = 0; i < Math.ceil(resource.length * (1 / 2)); i++) {
      this.list_user_1.push(resource[i]);
    }
    // for ( let i = Math.ceil(resource.length * (1 / 3)); i < Math.ceil(resource.length * (2 / 3)); i++) {
    //   this.list_user_2.push(resource[i]);
    // }
    for (let i = Math.ceil(resource.length * (1 / 2)); i < resource.length; i++) {
      this.list_user_2.push(resource[i]);
    }
  }
  get_checkbox(event: any, site_id: number) {
    // console.log(event);
    if (event) {
      this.check_arr.push(site_id);
    } else {
      const i = this.check_arr.indexOf(site_id);
      this.check_arr.splice(i, 1);
    }
    // console.log(this.check_arr);
  }
  get_checkbox_user(event: any, user_id: number) {
    // console.log(event);
    if (event) {
      this.check_arr_user.push(user_id);
    } else {
      const i = this.check_arr_user.indexOf(user_id);
      this.check_arr_user.splice(i, 1);
    }
    // console.log(this.check_arr_user);
  }
  // truyền dữ liệu popup
  dulieuthaydoi(item, templates: TemplateRef<any>) {
    if (!environment.production) {
      console.log('data thay đổi', item);
    }
    this.check_arr = [];
    this.check_arr_user = [];
    this.sites = [];
    this.list_user_1 = [];
    this.list_user_2 = [];
    this.list_user_3 = [];
    this.data_update = [];
    const org_id = Number(item.organization_id);
    const group_id = Number(item.id);
    this.blockUI.start('Đang tải dữ liệu...');
    const url = environment.API.group + '_get_update/' + group_id;
    this.appservice.get(url).subscribe(res => {
      if (!environment.production) {
        console.log(res);
      }
      this.data_update = res;
      res.group_site.forEach(element => {
        this.check_arr.push(Number(element.site_id));
      });
      res.group_user.forEach(element => {
        this.check_arr_user.push(Number(element.user_id));
      });
      // console.log('data_update', this.data_update);
      // console.log('check_arr', this.check_arr);
      // console.log('check_arr_user', this.check_arr_user);
    },
      (error) => {
        this.blockUI.start('Lỗi không tải được dữ liệu');
        this.blockUI.stop();
        if (!environment.production) {
          console.log(error);
        }
      },
      () => {
        this.blockUI.stop();
        // if (this.userlogged.lever === '0') {
        this.get_data_from_tochuc(org_id);
        // }
        this.organization_update_id = this.data_update.group[0].organization_id;
        this.org_selectedform = item.organization_id;
        this.modalRef = this.modalService.show(templates, {
          backdrop: true,
          ignoreBackdropClick: true
        });
      });
  }
  user_check(item: any) {
    // this.check_arr_user = [];
    const group_user = this.data_update.group_user;
    for (let i = 0; i < group_user.length; i++) {
      const e_id = Number(group_user[i].user_id);
      const id = Number(item.id);
      if (e_id === id) {
        return true;
      }
      if (i === (group_user.length - 1)) {
        if (e_id !== id) {
          return false;
        }
      }
    }
  }
  site_check(item: any) {
    // this.check_arr = [];
    const group_site = this.data_update.group_site;
    for (let i = 0; i < group_site.length; i++) {
      const e_id = Number(group_site[i].site_id);
      const id = Number(item.id);
      if (e_id === id) {
        return true;
      }
      if (i === (group_site.length - 1)) {
        if (e_id !== id) {
          return false;
        }
      }
    }
  }
  //  thay đổi tổ chức
  thaydoitochuc(event) {
    if (!environment.production) {
      console.log('id', event.value);
      // console.log('org_id', this.data_update.group[0].organization_id);
      console.log('data_update', this.data_update);
    }
    this.check_arr = [];
    this.check_arr_user = [];
    if (this.data_update) {
      if (Number(event.value) === Number(this.data_update.group[0].organization_id)) {
        this.data_update.group_site.forEach(element => {
          this.check_arr.push(Number(element.site_id));
        });
        this.data_update.group_user.forEach(element => {
          this.check_arr_user.push(Number(element.user_id));
        });
      }
    }
    // console.log('site_array', this.check_arr);
    // console.log('user_arr', this.check_arr_user);
    this.org_selectedform = event.value;
    // this.tu_khoa = '';
    this.get_data_from_tochuc(event.value);
  }
  get_data_from_tochuc(org_id: number) {
    this.blockUI.start('Đang tải dữ liệu...');
    const url = environment.API.group + '_get_user_and_site/' + org_id;
    this.appservice.get(url).subscribe(res => {
      if (!environment.production) {
        console.log(res);
      }
      if (!this.appservice.isEmptyObject(res)) {
        this.sites = [];
        this.devide_array(res.users);
        this.ham_dequy(res.sites);
        // console.log(this.sites);
      }
    },
      (error) => {
        this.blockUI.start('Lỗi không tải được dữ liệu');
        this.blockUI.stop();
        if (!environment.production) {
          console.log(error);
        }
      },
      () => {
        this.blockUI.stop();
      });
  }
  ham_dequy(array: any, id = 0, space = 0) {
    // this.sites = [];
    array.forEach(element => {
      if (Number(element.parent_id) === id) {
        // tslint:disable-next-line:no-shadowed-variable
        const id = Number(element.id);
        this.sites.push({
          id: element.id,
          name: element.site_name,
          space: space,
          site_description: element.site_description
        });
        const scope = space + 5;
        this.ham_dequy(array, id, scope);
      }
    });
  }
  // lấy data thông thường
  get_data() {
    this.blockUI.start('Đang tải dữ liệu...');
    this.appservice.get(environment.API.group).subscribe(res => {
      if (!environment.production) {
        console.log(res);
      }
      this.data = res.data;
    },
      (error) => {
        this.blockUI.start('Lỗi không tải được dữ liệu');
        this.blockUI.stop();
        if (!environment.production) {
          console.log(error);
        }
      },
      () => {
        this.blockUI.stop();
      });
  }
  // lấy data theo router
  get_data2() {
    this.blockUI.start('Đang tải dữ liệu...');
    const data = {
      organization: this.route.snapshot.params.id
    };
    if (!environment.production) {
      console.log('data gửi đi', data);
    }
    this.appservice.post(data, environment.FBA.Administration.get_users_filter).subscribe(res => {
      if (!environment.production) {
        console.log(res);
      }
      this.user_organization = res;
    },
      (error) => {
        this.blockUI.stop();
      },
      () => {
        this.blockUI.stop();
      });
  }

  // Thêm mới users
  insertform(item: NgForm) {
    // this.blockUI.start('Đang thêm dữ liệu...');
    if (!environment.production) {
      console.log('dữ liệu gửi đi', item.value);
    }
    // console.log('site', this.check_arr);
    // console.log('users', this.check_arr_user);
    const short_item = [];
    short_item.push({
      actived: item.value.actived
      , group_name: item.value.group_name
      , organization_id: item.value.organization_id
      , group_description: item.value.group_description
      , site_array: this.check_arr
      , user_array: this.check_arr_user
    });
    this.check_arr = [];
    this.check_arr_user = [];
    item.controls['group_name'].reset();
    item.controls['group_description'].reset();
    const data = {
      data: JSON.stringify(short_item)
    };
    this.appservice.post(data, environment.API.group).subscribe(
      para => {
        if (!environment.production) {
          console.log('dữ liệu gửi về', para);
        }
        if (para.message === 1) {
          this.get_data();
        }
        // this.get_data();
        // this.router.navigate(['/admin/admin']);
      },
      (error) => {
        this.blockUI.stop();
      },
      () => {
        this.blockUI.stop();
        this.modalRef.hide();
      });
  }
  updateform(item: NgForm) {
    const short_item = [];
    short_item.push({
      actived: item.value.actived
      , group_name: item.value.group_name
      , organization_id: item.value.organization_id
      , group_description: item.value.group_description
      , site_array: this.check_arr
      , user_array: this.check_arr_user
    });
    this.check_arr = [];
    this.check_arr_user = [];
    // console.log('short_item', short_item);
    this.blockUI.start('Đang cập nhật dữ liệu...');
    const data = {
      data: JSON.stringify(short_item)
    };
    const group_id = this.data_update.group[0].id;
    const url = environment.API.group + '_post_update/' + group_id;
    this.appservice.post(data, url).subscribe(
      para => {
        if (!environment.production) {
          console.log('dữ liệu gửi về', para);
        }
        if (para.message === 1) {
          this.get_data();
        }
        // this.get_data();
        // this.router.navigate(['/admin/admin']);
      },
      (error) => {
        this.blockUI.stop();
      },
      () => {
        this.blockUI.stop();
        this.modalRef.hide();
      });
  }
  // xóa users
  delete_group() {
    // const c = confirm('Bạn đồng ý xóa?');
    const data = {
      id: this.id_deleted
      // , deleted: 1
    };
    if (!environment.production) {
      console.log(data);
    }
    this.blockUI.start('Đang xử lý dữ liệu...');
    const url = environment.API.group + '_delete';
    this.appservice.post(data, url).subscribe(
      param => {
        this.modalRef.hide();
        if (param.message === 1) {
          this.get_data();
        }
      },
      (error) => {
        if (!environment.production) {
          console.log(error);
        }
        this.blockUI.stop();
      },
      () => {
        this.blockUI.stop();
      }
    );
  }

}



