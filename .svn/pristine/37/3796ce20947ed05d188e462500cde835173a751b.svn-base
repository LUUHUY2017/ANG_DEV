import { IOption } from 'ng-select';   // select option <option>

import { Component, OnInit, ViewChild, ElementRef, TemplateRef, OnDestroy } from '@angular/core';
import { Router } from '@angular/router';
import { environment } from '../../../../../environments/environment';
import { AppService } from '../../../../app.service';

// Import BlockUI decorator & optional NgBlockUI type
import { BlockUI, NgBlockUI } from 'ng-block-ui';
// import Modal
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
// chỉnh css angular
import { ViewEncapsulation } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import 'rxjs/add/operator/map';
import { GeneralMenuComponent } from '../../../viewchild/generalmenu/generalmenu.component';
// import notification
import { NotifierService } from 'angular-notifier';
import { BehaviorSubject } from 'rxjs';
import { language } from '../../admin_language';
import { language_en } from '../../admin_language_en';

@ViewChild(GeneralMenuComponent)
@Component({
  templateUrl: './location.component.html',
  styleUrls: ['./location.component.css'],
  // chỉnh css angular
  encapsulation: ViewEncapsulation.None
})
export class LocationComponent implements OnInit, OnDestroy {
  @ViewChild('dataTable') table: ElementRef;
  @BlockUI() blockUI: NgBlockUI;
  private readonly notifier: NotifierService;
  private subcription: any;
  page_id = '\'' + environment.Pages.general.location + '\'';
  can_add: boolean;
  can_update: boolean;
  can_delete: boolean;
  // Khai báo kiểu dữ kiệu
  data: Array<any>;
  data_filter: Array<any>;
  data_update: any;
  organization_id: string;
  organization_arr: Array<IOption>;
  hidden_select_organization: boolean;
  modalRef: BsModalRef;
  siteSelectionDisplay = false;
  rowsOnPage = 15;
  menu_tree: Array<any>;
  snap_menu_tree: Array<any>;
  select_module: Array<any>;
  module_id: string;
  webState: BehaviorSubject<any>;
  tu_khoa: string;
  oldState: string;
  showSelectCrud: boolean;
  userLogged = JSON.parse(localStorage.getItem(environment.UserLoged));
  delete_object: any;
  error_array: Array<string>;
  option_delete: any;
  siteArray: any;
  siteSelected: any;
  module_update: any[]; language: any;
  constructor(private router: Router,
    private route: ActivatedRoute,
    notifierService: NotifierService,
    private appservice: AppService,
    private modalService: BsModalService) {
    this.notifier = notifierService;
  }
  ngOnInit(): void {
    const firstState = {
      data: null
      , state: null
    };
    this.webState = new BehaviorSubject(firstState);
    const type_language = JSON.parse(localStorage.getItem(environment.language));
    type_language === 'vn' ? this.language = language : this.language = language_en;
    this.get_organization();
    this.setDefaultValue();
    this.watchStateChange();
    this.set_default_crud(false);
  }
  setDefaultValue() {
    this.data_filter = [];
    this.data = [];
    this.data_update = null;
    this.error_array = [];
    this.option_delete = 0;
    this.select_module = [];
    this.module_update = [];
  }
  // Lấy thông tin tổ chức lên ng-select
  get_organization() {
    this.blockUI.start(this.language.dang_tai_du_lieu);
    const url = environment.API.userGetOrg;
    this.appservice.get(url).subscribe(
      param => {
        if (!environment.production) {
          // console.log('get_user_page_parametter', param);
        }
        if ('message' in param) {
          this.notifier.notify('error', this.language.co_loi_xay_ra);
          return;
        }
        const org = param.organization_arr.slice(0);
        this.organization_arr = org;
        this.organization_id = param.organization_arr[0].value;
        this.select_module = param.moduleArray.filter(item => item.value);
        this.module_id = this.select_module[0].value;
        this.get_data();
      },
      (error) => {
        if (!environment.production) {
          // console.log(error);
        }
        this.notifier.notify('error', this.language.co_loi_xay_ra);
        this.blockUI.stop();
      });
  }
  // lấy data thông thường
  get_data() {
    this.blockUI.start(this.language.dang_tai_du_lieu);
    const data = {
      organization_id: this.organization_id
      , deleted: this.option_delete
      , module_id: this.module_id
    };
    if (!environment.production) {
      // console.log('data gửi đi', data);
    }
    this.appservice.post(data, environment.FBA.Administration.get_location).subscribe(res => {
      if (!environment.production) {
        console.log(res);
      }
      this.menu_tree = [];
      this.set_default_crud(true);
      this.updateState('retrieve', res.locationArray);
      this.recusive_menu(res.siteArray);
    },
      (error) => {
        if (!environment.production) {
          // console.log(error);
        }
        this.notifier.notify('error', this.language.co_loi_xay_ra);
      }).add(() => {
        this.blockUI.stop();
      });
  }
  watchStateChange() {
    this.subcription = this.webState.asObservable();
    this.subcription.subscribe(res => {
      const currentState = res.state;
      const item = res.data;
      // Đây là sự kiện khi vừa load trang get data về
      if (currentState === environment.STATE.retrieve) {
        // Sự kiện nhận dữ liệu về thì bỏ hành động tìm kiếm trước đó
        this.tu_khoa = null;
        this.data = item;
        this.data_filter = this.data;
        // Nếu là sự kiện thêm mới
      } else if (currentState === environment.STATE.insert) {
        this.data.push(item);
        // Nếu trạng thái trước đó là search
        if (this.oldState === environment.STATE.search) {
          this.updateState(environment.STATE.search);
        }
        this.notifier.notify('success', this.language.them_moi_thanh_cong);
        // nếu là sự kiện sửa
      } else if (currentState === environment.STATE.update) {
        for (let i = 0; i < this.data.length; i++) {
          if (Number(this.data[i].id) === Number(item.id)) {
            this.data[i] = item;
            break;
          }
        }
        // Nếu trạng thái trước đó là search
        if (this.oldState === environment.STATE.search) {
          this.updateState(environment.STATE.search);
        }
        this.notifier.notify('success', this.language.cap_nhat_thanh_cong);
        // Nếu là sự kiện xóa
      } else if (currentState === environment.STATE.delete) {
        this.data.splice(this.data.findIndex(e => e.id === item.id), 1);
        // Nếu trạng thái trước đó là search
        if (this.oldState === environment.STATE.search) {
          this.updateState(environment.STATE.search);
        }
        this.notifier.notify('success', this.language.xoa_thanh_cong);
        // Nếu có sự kiện tìm kiếm
      } else if (currentState === environment.STATE.search) {
        const string = this.tu_khoa ? this.tu_khoa.toLowerCase() : '';
        // console.log(string);
        if (string === '') {
          this.data_filter = this.data;
        } else {
          this.data_filter = this.data.filter(x => x.location_name.toLowerCase().indexOf(string) !== -1);
        }
      }
    });
  }
  showSelectFunc() {
    this.showSelectCrud = false;
    const lever = Number(this.userLogged.lever);
    const org_id = Number(this.userLogged.organization_id);
    if (lever === 0 && org_id === 0) {
      this.showSelectCrud = true;
    }
  }
  updateState(stateString: string, data = null) {
    const stateWithData = {
      state: stateString
      , data: data
    };
    const oldStateObj = this.webState.getValue();
    this.oldState = oldStateObj.state;
    this.webState.next(stateWithData);
  }
  // thay đổi tổ chức bảng
  changeorganization_table(event) {
    if (!environment.production) {
      console.log('id_or', event);
    }
    this.organization_id = event;
    this.get_data();
  }
  // mở modal thêm mới dữ liệu
  open_modal_them_moi(templates: TemplateRef<any>) {
    this.modalRef = this.modalService.show(templates, {
      backdrop: true,
      ignoreBackdropClick: true
    });
    this.siteSelected = null;
    this.error_array = [];
    this.module_update = this.select_module.filter(item => item.value === this.module_id);
  }
  // get_all_site() {

  // }
  // Hàm đệ quy menu
  recusive_menu(array: any[], id = null, space = 0) {
    array.forEach(element => {
      if (element.parent_id === id) {
        const a_id = element.id;
        this.menu_tree.push({
          id: element.id
          , site_name: element.site_name
          , parent_id: element.parent_id
          , alevel: space
          , enables: element.enables
          , store: element.store
        });
        const scope = space + 1;
        this.recusive_menu(array, a_id, scope);
      }
    });
  }
  changesite(item: any) {
    if (!environment.production) {
      console.log('id', item.id);
    }
    if (item.store === '0' || item.enables === '0') {
      this.modalRef.hide();
      this.notifier.notify('error', this.language.co_loi_xay_ra);
      return;
    }
    this.siteSelected = item;
    this.siteSelectionDisplay = false;
  }
  show_update(item: any, template: TemplateRef<any>) {
    if (!environment.production) {
      console.log('data_item', item);
    }
    this.data_update = Object.assign({}, item);
    const site_id = this.data_update.site_id;
    this.error_array = [];
    this.siteSelected = this.menu_tree.find(index => index.id === site_id);
    this.modalRef = this.modalService.show(template, {
      backdrop: true,
      ignoreBackdropClick: true
    });
  }
  set_default_crud(bool: boolean) {
    this.can_add = bool;
    this.can_update = bool;
    this.can_delete = bool;
  }
  // thêm vị trí cho thiết bị
  insert_location(item) {
    if (item.invalid || !this.siteSelected) {
      this.notifier.notify('error', this.language.du_lieu_khong_phu_hop);
      return;
    }
    const data = { ...item.value, site_id: this.siteSelected.id, site_name: this.siteSelected.site_name };
    // xét error về rỗng.
    this.error_array = [];
    this.blockUI.start(this.language.dang_xu_ly_du_lieu);
    this.appservice.post(data, environment.FBA.Administration.insert_location).subscribe(
      res => {
        if (!environment.production) {
          // console.log('dữ liệu gửi về', res);
        }
        if (res.message === 1) {
          this.updateState(environment.STATE.insert, res.insertedData);
          this.modalRef.hide();
        } else {
          this.error_array = this.appservice.validate_error(res);
          // console.log(this.error_array);
        }
      },
      (error) => {
        this.error_array = [this.language.khong_the_ket_noi_may_chu];
      }).add(() => {
        this.blockUI.stop();
      });
  }
  // cập nhật thiết bị
  update_location(item) {
    if (item.invalid) {
      this.notifier.notify('error', this.language.du_lieu_khong_phu_hop);
      return;
    }
    if (!item.dirty) {
      this.modalRef.hide();
      this.notifier.notify('warning', this.language.loi_du_lieu_khong_the_thay_doi);
      this.blockUI.stop();
      return;
    }
    this.error_array = [];
    this.blockUI.start(this.language.dang_xu_ly_du_lieu);
    const data = { ...item.value, site_id: this.siteSelected.id, site_name: this.siteSelected.site_name };
    this.appservice.post(data, environment.FBA.Administration.update_location).subscribe(
      res => {
        if (!environment.production) {
          console.log('dữ liệu gửi về', res);
        }
        if (res.message === 1) {
          this.updateState(environment.STATE.update, res.updatedData);
          this.modalRef.hide();
        } else {
          this.error_array = this.appservice.validate_error(res);
        }
      },
      (error) => {
        this.error_array = [this.language.khong_the_ket_noi_may_chu];
      }).add(() => {
        this.blockUI.stop();
      });
  }
  change_module(value: any) {
    this.module_id = value;
    console.log('module', this.module_id);
    this.get_data();
  }
  preventChange() {
    this.modalRef.hide();
    this.notifier.notify('error', this.language.loi_du_lieu_khong_the_thay_doi);
  }
  // tìm kiếm bảng thiết bị
  search_table(searchString: string) {
    this.tu_khoa = searchString;
    this.updateState(environment.STATE.search);
  }
  // hỏi xóa modal
  show_delete(item: Object, dialog: TemplateRef<any>) {
    if (!environment.production) {
      console.log('data_item', item);
    }
    this.delete_object = item;
    this.modalRef = this.modalService.show(dialog, {
      backdrop: true,
      ignoreBackdropClick: true
    });
  }
  delete_location() {
    this.blockUI.start(this.language.dang_xu_ly_du_lieu);
    this.appservice.post(this.delete_object, environment.FBA.Administration.update_location + '_delete').subscribe(
      param => {
        if (param.message === 1) {
          this.updateState('delete', this.delete_object);
        } else {
          this.notifier.notify('error', param.message);
        }
      },
      (error) => {
        this.notifier.notify('error', this.language.co_loi_xay_ra);
      }).add(() => {
        this.modalRef.hide();
        this.blockUI.stop();
      });
  }
  ngOnDestroy() {
    this.webState.complete();
  }
}
