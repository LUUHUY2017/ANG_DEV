import { IOption } from 'ng-select';   // select option <option>
import { Component, OnInit, ViewChild, ElementRef, TemplateRef } from '@angular/core';
import { Router } from '@angular/router';
import { environment } from '../../../../../environments/environment';
import { AppService } from '../../../../app.service';

// Import BlockUI decorator & optional NgBlockUI type
import { BlockUI, NgBlockUI } from 'ng-block-ui';

// chỉnh css angular
import { ViewEncapsulation } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import 'rxjs/add/operator/map';
// import Modal
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';

import { GeneralMenuComponent } from '../../../viewchild/generalmenu/generalmenu.component';
import { language } from '../../admin_language';
import { language_en } from '../../admin_language_en';
import { NotifierService } from 'angular-notifier';
@Component({
  templateUrl: './administration.component.html',
  styleUrls: ['./administration.component.css'],
  // chỉnh css angular
  encapsulation: ViewEncapsulation.None
})
@ViewChild(GeneralMenuComponent)
export class AdministrationComponent implements OnInit {
  page_id = '\'' + environment.Pages.general.sites + '\'';
  @ViewChild('dataTable') table: ElementRef;
  // @ViewChild(GeneralMenuComponent)
  @BlockUI() blockUI: NgBlockUI;
  site_array: any[];
  can_add: boolean;
  can_update: boolean;
  can_delete: boolean;
  siteTreeList: any;
  organization_id: any;
  organization_arr: Array<IOption>;
  categoryArray: Array<IOption>;
  data_update: any;
  modalRef: BsModalRef;
  menu_tree: any;
  snap_menu_tree: any;
  siteSelectionDisplay = false;
  store_default = false;
  is_admin_organization = JSON.parse(localStorage.getItem(environment.is_admin_organization));
  user_info = JSON.parse(localStorage.getItem(environment.UserLoged));
  can_add_specific = false;
  error_array: any;
  delete_object: any;
  deleted: number;
  sitePermissionArray: any[];
  parentIdSelected: any;
  site_in_role: any;
  language: any; siteSelected: any;
  type_language = JSON.parse(localStorage.getItem(environment.language));
  constructor(private router: Router,
    private route: ActivatedRoute,
    private modalService: BsModalService,
    private appservice: AppService,
    private notifier: NotifierService) {
    this.type_language === 'vn' ? this.language = language : this.language = language_en;
  }
  ngOnInit(): void {
    this.setDefaultValue();
    this.get_organization();
  }
  setDefaultValue() {
    this.can_add = false;
    this.deleted = 0;
  }
  get_organization() {
    this.blockUI.start(this.language.dang_tai_du_lieu);
    const url = environment.API.userGetOrg;
    this.appservice.get(url).subscribe(
      param => {
        if (!environment.production) {
          // console.log('get_user_page_parametter', param);
        }
        if ('message' in param) {
          this.notifier.notify('error', this.language.co_loi_xay_ra);
          return;
        }
        const org = param.organization_arr.slice(0);
        this.organization_arr = org;
        this.organization_id = param.organization_arr[0].value;
        this.get_data();
      },
      (error) => {
        this.notifier.notify('error', this.language.khong_the_ket_noi_may_chu);
        this.blockUI.stop();
      });
  }

  // thay đổi tổ chức bảng
  changeorganization_table(event) {
    this.organization_id = event;
    this.get_data();
  }

  preventChange() {
    this.modalRef.hide();
    this.notifier.notify('error', this.language.loi_du_lieu_khong_the_thay_doi);
  }
  get_data() {
    this.site_array = [];
    this.site_in_role = [];
    this.blockUI.start(this.language.dang_tai_du_lieu);
    const url = environment.API.sites + '_get_site_with_permission';
    const data = {
      organization_id: this.organization_id
      , deleted: this.deleted
    };
    this.appservice.post(data, url).subscribe(res => {
      if (!environment.production) {
        console.log('response', res);
      }
      this.can_add = true;
      this.can_add_specific = (this.user_info.lever === '0' && this.user_info.organization_id === '0')
        || this.is_admin_organization.length > 0;
      this.categoryArray = res.category_array;
      this.ham_dequy(res.site_array);
      this.sitePermissionArray = this.clone_array(this.site_array);
      this.siteTreeList = this.appservice.convert_sites_tree_ng_dropdown(this.site_array);
      this.recusive_menu(res.site_in_role);
    },
      (error) => {
        this.notifier.notify('error', this.language.khong_the_ket_noi_may_chu);
      }).add(() => {
        this.blockUI.stop();
      });
  }
  recusive_menu(array: any[], id = null, space = 0) {
    array.forEach(element => {
      if (element.parent_id === id) {
        const a_id = element.id;
        this.site_in_role.push({
          id: element.id
          , site_name: element.site_name
          , parent_id: element.parent_id
          , alevel: space
          , enables: element.enables
          , store: element.store
        });
        const scope = space + 1;
        this.recusive_menu(array, a_id, scope);
      }
    });
  }
  clone_array(...array: Array<any>) {
    return array[0];
  }
  ham_dequy(array: any[], id = 0, space = 0) {
    array.forEach(element => {
      if (Number(element.parent_id) === id) {
        const a_id = Number(element.id);
        const string = String(space);
        this.site_array.push({
          site_id: element.id,
          site_name: element.site_name,
          site_code: element.site_code,
          site_shortname: element.site_shortname,
          alevel: string,
          site_description: element.site_description,
          parent_id: element.parent_id,
          enables: element.enables,
          category_id: element.category_id,
          organization_id: element.organization_id,
          store: Number(element.store) === 1,
          open_hour: element.open_hour,
          close_hour: element.close_hour,
          actived: element.actived
        });
        const scope = space + 1;
        this.ham_dequy(array, a_id, scope);
      }
    });
  }
  // mở modal thêm mới default dữ liệu
  open_modal_them_moi(modal_default: TemplateRef<any>) {
    this.modalRef = this.modalService.show(modal_default, {
      backdrop: true,
      ignoreBackdropClick: true
    });
    this.store_default = false;
    this.error_array = [];
  }

  // truyền dữ liệu cho model tương ứng với từng địa điểm khi sửa
  open_popup_update(item, templates: TemplateRef<any>) {
    if (!environment.production) {
      console.log('a', item);
    }
    this.data_update = Object.assign({}, item);
    this.siteSelected = this.site_in_role.find(e => e.id === item.parent_id);
    this.modalRef = this.modalService.show(templates, {
      backdrop: true,
      ignoreBackdropClick: true
    });
    this.store_default = item.store;
    this.error_array = [];
  }
  change_menu_tree(item: any) {
    this.siteSelected = Object.assign({}, item);
    this.siteSelectionDisplay = false;
  }
  // Thực hiện cập nhật địa điểm
  updateform(item) {
    if (item.invalid) {
      this.modalRef.hide();
      this.notifier.notify('error', this.language.loi_du_lieu_khong_the_thay_doi);
      return;
    }
    this.blockUI.start(this.language.dang_xu_ly_du_lieu);
    if (!environment.production) {
      console.log('dữ liệu gửi đi', item.value);
    }
    this.error_array = [];
    this.appservice.post(item.value, environment.FBA.Administration.update_site).subscribe(
      para => {
        if (!environment.production) {
          console.log('dữ liệu gửi về', para);
        }
        if (para.message === 1) {
          this.modalRef.hide();
          this.notifier.notify('success', this.language.cap_nhat_thanh_Cong);
          this.get_data();
        } else {
          this.error_array = this.appservice.validate_error(para);
        }
      }, (error) => {
        this.notifier.notify('error', this.language.khong_the_ket_noi_may_chu);
      }).add(() => {
        this.blockUI.stop();
      });
  }
  // Mở modal thêm địa điểm
  open_popup_insert(item, template: TemplateRef<any>) {
    this.modalRef = this.modalService.show(template, {
      backdrop: true,
      ignoreBackdropClick: true
    });
    this.parentIdSelected = item.id;
    this.store_default = false;
  }

  // Thực hiện thêm địa điểm
  insertform(item) {
    this.error_array = [];
    this.blockUI.start(this.language.dang_xu_ly_du_lieu);
    if (!environment.production) {
      console.log('dữ liệu gửi đi', item.value);
    }
    this.appservice.post(item.value, environment.FBA.Administration.insert_site).subscribe(
      para => {
        if (!environment.production) {
          console.log('dữ liệu gửi về', para);
        }
        if (para.message === 1) {
          this.modalRef.hide();
          this.notifier.notify('success', this.language.them_moi_thanh_cong);
          this.get_data();
        } else {
          this.error_array = this.appservice.validate_error(para);
        }
      },
      (error) => {
        this.notifier.notify('error', this.language.khong_the_ket_noi_may_chu);
      }).add(() => {
        this.blockUI.stop();
      });
  }
  reset_to_zero(...array: any[]) {
    array.forEach(element => {
      this[element] = '';
    });
  }
  // Thực hiện xóa địa điểm
  show_delete(template: TemplateRef<any>, item: object): void {
    this.modalRef = this.modalService.show(template);
    this.delete_object = item;
  }

  delete_function() {
    const data = { ...this.delete_object, deleted: this.deleted };
    this.blockUI.start('Đang xử lý dữ liệu...');
    this.appservice.post(data, environment.FBA.Administration.delete_site).subscribe(
      param => {
        if (param.message === 1) {
          this.notifier.notify('success', this.language.xoa_thanh_cong);
          this.get_data();
        } else {
          this.notifier.notify('error', this.language.co_loi_xay_ra);
        }
      },
      (error) => {
        this.notifier.notify('error', this.language.khong_the_ket_noi_may_chu);
      }).add(() => {
        this.modalRef.hide();
        this.blockUI.stop();
      });
  }
}
