import { IOption } from 'ng-select';

import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';
import { Router } from '@angular/router';
import { environment } from '../../../../environments/environment';
import { AppService } from '../../../app.service';

// Import BlockUI decorator & optional NgBlockUI type
import { BlockUI, NgBlockUI } from 'ng-block-ui';

// highcharts
import Highcharts from 'highcharts';
import More from 'highcharts/highcharts-more';
import Tree from 'highcharts/modules/treemap';
import Heatmap from 'highcharts/modules/heatmap';
// import router
import { ActivatedRoute } from '@angular/router';
More(Highcharts);
Tree(Highcharts);
Heatmap(Highcharts);
// thêm mới dateranger
declare var $;
declare function intDateRangePicker_viewchild(start_date, end_date): any;

@Component({
    selector: 'app-age-metrics-analytics',
    templateUrl: './age-metrics-analytics.component.html',
    styleUrls: [
        './age-metrics-analytics.component.scss',
        './age-metrics-analytics.component.css'
    ],
})
export class AgeMetricsAnalyticsComponent implements OnInit {
    page_id = '\'' + environment.Pages.age.metrics_age + '\'';
    @BlockUI() blockUI: NgBlockUI;
    @ViewChild('container', { read: ElementRef }) container: ElementRef;
    time_generate_report = new Date();

    // public navItems = navItems;
    public sidebarMinimized = true;
    private changes: MutationObserver;
    public element: HTMLElement = document.body;
    name_of_excel: any;

    // **** kết thúc phần hiển thị popup ******
    constructor(private router: Router,
        private route: ActivatedRoute,
        private appservice: AppService) {
        this.changes = new MutationObserver((mutations) => {
            this.sidebarMinimized = document.body.classList.contains('sidebar-minimized');
        });
        this.changes.observe(<Element>this.element, {
            attributes: true
        });
    }
    organization_id: number;
    snap_menu_tree: any;
    siteSelectionDisplay = false;
    siteSelectionDisplay2 = false;
    locationSelectionDisplay = false;
    start_date: any;
    end_date: any;
    site_id: number;
    style_start_date: any;
    style_end_date: any;

    startTimeOption: Array<IOption>;
    endTimeOption: Array<IOption>;
    startTime: string;
    endTime: string;

    time_period: string;
    title_time_period: string;
    time_period2: string;
    location: string;
    title_location: string;

    data: any;
    fba_time_period_overview: any;
    menu_tree: any;
    hidden_menu_location = false;
    indexOption: Array<IOption>;
    organization_arr_option: Array<IOption>;
    indexOptionSelected: string;
    /*----------  Giá trị mặc định  ----------*/
    viewDataBy: string;
    time_value: string;
    category_data = [];
    age18 = 0;
    age18_24 = 0; age25_34 = 0; age35_44 = 0; age45_54 = 0;
    age55_64 = 0; age65 = 0; total_age = 0;
    url_api = environment.apiUrl + 'exports/';
    has_site: number;
    startt: string;
    endt: string;
    view: string;

    ngOnInit() {
        const self = this;
        this.get_location_time();
        this.show_menu_location();
        intDateRangePicker_viewchild(Number(new Date()), Number(new Date()));
        $(function () {
            $('#endDateReportTemp').change(function () {
                self.date_ranger_event();
            });
        });
    }
    date_ranger_event() {
        this.time_value = null;
        this.start_date = (document.getElementById('startDateReportTemp') as HTMLInputElement).value;
        this.end_date = (document.getElementById('endDateReportTemp') as HTMLInputElement).value;
        const start_d = new Date(this.start_date.replace(/[']/g, ''));
        const end_d = new Date(this.end_date.replace(/[']/g, ''));
        this.time_period = this.appservice.convert_date_tostringdatemonth(start_d)
            + ' - ' + this.appservice.convert_date_tostringdatemonth(end_d);
        // console.log(this.start_date);
        // console.log(this.end_date);
    }
    get_location_time() {
        this.blockUI.start('Đang tải cấu hình...');
        this.appservice.get_user_page_parametter(this.page_id).subscribe(
            param => {
                this.organization_arr_option = param.organization_arr;
                this.fba_time_period_overview = param.fba_time_period_metrics;
                this.startTimeOption = param.start_time_list;
                this.endTimeOption = param.end_time_list;
                this.indexOption = param.fba_index;
                this.indexOptionSelected = this.indexOption[1].value;

                let para = null;
                if (param.user_page_parametter.length > 0 || !this.appservice.isEmptyObject(param.user_page_parametter)) {
                    para = param.user_page_parametter;
                    this.organization_id = para.organization_id;
                    this.startTime = para.start_time;
                    this.endTime = para.end_time;
                    this.time_period = para.time_period;
                    this.site_id = para.site_id;
                    this.viewDataBy = para.view_by;
                    if (para.time_value == null || para.time_value === '') {
                        this.start_date = para.start_date;
                        this.end_date = para.end_date;
                    } else {
                        this.get_time(para.time_value);
                    }
                    this.has_site = 1;
                    // console.log('time_value', para.time_value);
                } else {
                    /*----------  Xử lí thời gian   ----------*/
                    this.organization_id = param.organization_arr[0].value;

                    this.viewDataBy = 'Day';
                    const time_on_now = new Date();
                    this.start_date = '\'' + this.appservice.convert_date_tostringdate_by_nghia(time_on_now) + '\'';
                    this.end_date = '\'' + this.appservice.convert_date_tostringdate_by_nghia(time_on_now) + '\'';
                    this.time_period = 'Hôm nay';
                    this.time_value = 'today';
                    this.startTime = this.startTimeOption[0].value.toString();
                    this.endTime = this.endTimeOption[22].value.toString();
                }
            },
            (error) => {
                if (!environment.production) {
                    console.log(error);
                }
                this.blockUI.stop();
            },
            () => {
                this.blockUI.stop();
                this.get_sitetree();
            }
        );
    }
    // get_sitetree() {
    //     this.blockUI.start('Đang tải thông tin tổ chức...');
    //     this.appservice.fba_get_org_tree(this.organization_id)
    //         .then(res => {
    //             if (!environment.production) {
    //                 console.log('get_sitetree', res);
    //             }
    //             this.menu_tree = res;
    //             this.snap_menu_tree = res;
    //             if (this.has_site === 2 || this.has_site !== 1) {
    //                 this.site_id = this.menu_tree[0].id;
    //                 this.location = this.menu_tree[0].site_name;
    //             } else {
    //                 this.location = this.menu_tree.filter(x => x.id === this.site_id)[0].site_name;
    //             }
    //             this.title_location = this.location;
    //             this.get_data();
    //         })
    //         .catch(error => {
    //             this.blockUI.stop();
    //         });
    // }
    get_sitetree() {
        this.blockUI.start('Đang tải thông tin tổ chức...');
        const url = environment.API.sites + '_get_site_for_report';
        const data = {
            organization_id: this.organization_id
        };
        this.appservice.post(data, url).subscribe(res => {
            if (!environment.production) {
                console.log('get_sitetree', res);
            }
            this.menu_tree = [];
            this.recusive_menu(res.site_array);
            this.snap_menu_tree = this.menu_tree.slice(0);
            if (this.has_site === 2 || this.has_site !== 1) {
                const first_array = this.menu_tree.find(item => Number(item.enables) === 1);
                this.site_id = first_array.id;
                this.location = first_array.site_name;
            } else {
                this.location = this.menu_tree.filter(x => x.id === this.site_id)[0].site_name;
            }
            this.title_location = this.location;
            this.blockUI.stop();
            this.get_data();
        }, (error) => {
            this.blockUI.stop();
        });
    }
    // Hàm đệ quy menu
    recusive_menu(array: any[], id = null, space = 0) {
        array.forEach(element => {
            if (element.parent_id === id) {
                const a_id = element.id;
                this.menu_tree.push({
                    id: element.id
                    , site_name: element.site_name
                    , parent_id: element.parent_id
                    , alevel: space
                    , enables: element.enables
                });
                const scope = space + 1;
                this.recusive_menu(array, a_id, scope);
            }
        });
    }
    // hiện menu tổ chức theo user
    show_menu_location() {
        const userInfo = JSON.parse(localStorage.getItem(environment.UserLoged));
        if (!environment.production) {
            console.log('userInfo', userInfo);
        }
        if (userInfo.lever === '0') {
            this.hidden_menu_location = false;
        } else {
            this.hidden_menu_location = true;
        }
    }
    // thay đổi tổ chức
    changeorganization(event) {
        this.has_site = 2;
        this.organization_id = event.value;
        this.locationSelectionDisplay = false;
        this.get_sitetree();
    }
    // thay đổi giờ, ngày, tuần  tháng năm trên thanh  block
    change_view() {
        // this.blockUI.start('Đang tải dữ liệu...');
        this.get_data();
    }
    // search menu
    search_menu(value: string) {
        // chuyển giá trị truyền vào về chữ thường để so sánh
        const string = value.toLowerCase();
        if (string === '') {
            this.menu_tree = this.snap_menu_tree;
        } else {
            this.menu_tree = this.snap_menu_tree.filter(x => x.site_name.toLowerCase().indexOf(string) !== -1);
        }
    }
    //  chọn địa điểm
    changeitem(site_name, organization_id, id) {
        this.site_id = id;
        this.location = site_name;
        this.siteSelectionDisplay = false;
    }
    // thay đổi tuần tháng năm thời kỳ
    chonthoigian(item) {
        this.time_period = item.label;
        const time = item.value;
        this.get_time(time);
    }
    get_time(time_value) {
        const ngayhomnay = new Date();
        if (time_value === 'yesterday') {
            const yesterday = new Date(ngayhomnay.getFullYear(), ngayhomnay.getMonth(), Number(ngayhomnay.getDate()) - 1);
            this.start_date = '\'' + this.appservice.convert_date_tostringdate_by_nghia(yesterday) + '\'';
            this.end_date = '\'' + this.appservice.convert_date_tostringdate_by_nghia(yesterday) + '\'';
            this.siteSelectionDisplay2 = false;
        } else if (time_value === 'last_week') {
            const beforeOneWeek = new Date(new Date().getTime() - 60 * 60 * 24 * 7 * 1000);
            const beforeOneWeek2 = new Date(beforeOneWeek);
            const day = beforeOneWeek.getDay();
            const diffToMonday = beforeOneWeek.getDate() - day + (day === 0 ? -6 : 1);
            const lastMonday = new Date(beforeOneWeek.setDate(diffToMonday));
            const lastSunday = new Date(beforeOneWeek2.setDate(diffToMonday + 6));
            this.start_date = '\'' + this.appservice.convert_date_tostringdate_by_nghia(lastMonday) + '\'';
            this.end_date = '\'' + this.appservice.convert_date_tostringdate_by_nghia(lastSunday) + '\'';
            this.siteSelectionDisplay2 = false;
        } else if (time_value === 'last_month') {
            const month_now = new Date(ngayhomnay.getFullYear(), ngayhomnay.getMonth(), 0);
            const yesterday = new Date(ngayhomnay.getFullYear(), Number(ngayhomnay.getMonth()) - 1, 1);
            this.start_date = '\'' + this.appservice.convert_date_tostringdate_by_nghia(yesterday) + '\'';
            this.end_date = '\'' + this.appservice.convert_date_tostringdate_by_nghia(month_now) + '\'';
            this.siteSelectionDisplay2 = false;
        } else if (time_value === 'last_year') {
            const ngaybatdaun = new Date(Number(ngayhomnay.getFullYear()) - 1, 0, 1);
            const ngayketthucn = new Date(Number(ngayhomnay.getFullYear()) - 1, 11, 31);
            this.start_date = '\'' + this.appservice.convert_date_tostringdate_by_nghia(ngaybatdaun) + '\'';
            this.end_date = '\'' + this.appservice.convert_date_tostringdate_by_nghia(ngayketthucn) + '\'';
            this.siteSelectionDisplay2 = false;
        } else if (time_value === 'today') {
            this.start_date = '\'' + this.appservice.convert_date_tostringdate_by_nghia(ngayhomnay) + '\'';
            this.end_date = '\'' + this.appservice.convert_date_tostringdate_by_nghia(ngayhomnay) + '\'';
            this.siteSelectionDisplay2 = false;
        } else if (time_value === 'this_week') {
            const currentWeekDay = ngayhomnay.getDay();
            const lessDays = currentWeekDay === 0 ? 6 : currentWeekDay - 1;
            const wkStart = new Date(new Date(ngayhomnay).setDate(ngayhomnay.getDate() - lessDays));
            const wkEnd = new Date(new Date(wkStart).setDate(wkStart.getDate() + 6));
            this.start_date = '\'' + this.appservice.convert_date_tostringdate_by_nghia(wkStart) + '\'';
            this.end_date = '\'' + this.appservice.convert_date_tostringdate_by_nghia(wkEnd) + '\'';
            this.siteSelectionDisplay2 = false;
        } else if (time_value === 'this_month') {
            const ngaydauthangnay = new Date(ngayhomnay.getFullYear(), ngayhomnay.getMonth(), 1);
            const ngaycuoithangnay = new Date(ngayhomnay.getFullYear(), ngayhomnay.getMonth() + 1, 0);
            this.start_date = '\'' + this.appservice.convert_date_tostringdate_by_nghia(ngaydauthangnay) + '\'';
            this.end_date = '\'' + this.appservice.convert_date_tostringdate_by_nghia(ngaycuoithangnay) + '\'';
            this.siteSelectionDisplay2 = false;
        } else if (time_value === 'last_fourteen_day') {
            const ngaybatdau = new Date(ngayhomnay.getFullYear(), ngayhomnay.getMonth(), Number(ngayhomnay.getDate()) - 14);
            const ngayketthuc = new Date(ngayhomnay.getFullYear(), ngayhomnay.getMonth(), Number(ngayhomnay.getDate()) - 1);
            this.start_date = '\'' + this.appservice.convert_date_tostringdate_by_nghia(ngaybatdau) + '\'';
            this.end_date = '\'' + this.appservice.convert_date_tostringdate_by_nghia(ngayketthuc) + '\'';
            this.siteSelectionDisplay2 = false;
        } else if (time_value === 'this_year') {
            const ngaybatdaun = new Date(ngayhomnay.getFullYear(), 0, 1);
            const ngayketthucn = new Date(ngayhomnay.getFullYear(), 11, 31);
            this.start_date = '\'' + this.appservice.convert_date_tostringdate_by_nghia(ngaybatdaun) + '\'';
            this.end_date = '\'' + this.appservice.convert_date_tostringdate_by_nghia(ngayketthucn) + '\'';
            this.siteSelectionDisplay2 = false;
        }
        this.time_value = time_value;
        if (!environment.production) {
            console.log('a', this.start_date);
            console.log('b', this.end_date);
        }
    }
    // thay đổi nút áp dụng
    time_change() {
        this.blockUI.start('Đang tải dữ liệu...');
        this.get_data();
    }
    reset_to_zero(...array) {
        array.forEach(element => {
            this[element] = 0;
        });
    }
    go_total_row_age(a1: number, a2: number, a3: number, a4: number, a5: number, a6: number, a7: number) {
        let tong = 0;
        tong = (Number(a1) + Number(a2) + Number(a3) + Number(a4) + Number(a5) + Number(a6) + Number(a7));
        return tong;
    }
    go_number(number, total) {
        let tong = 0;
        if (total !== 0) {
            tong = ((Number(number) / total) * 100);
            return tong.toFixed(2);
        }
        return tong;
    }
    /*----------  Data  ----------*/
    get_data() {
        this.blockUI.start('Đang tải dữ liệu...');
        const data = {
            organization_id: this.organization_id
            , site_id: this.site_id
            , start_hour: '\'' + this.startTime + '\''
            , end_hour: '\'' + this.endTime + '\''
            , start_date: this.start_date
            , end_date: this.end_date
            , view_by: this.viewDataBy
        };
        if (!environment.production) {
            console.log('data', data);
        }
        this.time_generate_report = new Date();
        this.startt = this.startTimeOption.find(item => item.value === this.startTime).label;
        this.endt = this.endTimeOption.find(item => item.value === this.endTime).label;
        // tslint:disable-next-line:max-line-length
        this.view = this.viewDataBy === 'Day' ? 'Ngày' : this.viewDataBy === 'Week' ? 'Tuần' : this.viewDataBy === 'Month' ? 'Tháng' : this.viewDataBy === 'Year' ? 'Năm' : 'Giờ';
        const start_d = new Date(this.start_date.replace(/[']/g, '').replace(/[-]/g, '/'));
        const end_d = new Date(this.end_date.replace(/[']/g, '').replace(/[-]/g, '/'));
        this.style_start_date = this.appservice.convert_date_tostringdate_by_nghia(start_d, false);
        this.style_end_date = this.appservice.convert_date_tostringdate_by_nghia(end_d, false);
        this.title_location = this.location;
        if (this.time_value === null || this.time_value === '' || !this.time_value) {
            this.title_time_period = 'Ngày';
            this.time_period2 = this.time_period;
        } else {
            this.title_time_period = this.time_period;
            if (this.start_date === this.end_date) {
                this.time_period2 = this.style_start_date;
            } else {
                this.time_period2 = this.style_start_date + ' - ' + this.style_end_date;
            }
        }
        this.appservice.post(data, environment.GENDERAGE.API.sp_poc_gender_metric_analytic).subscribe(
            res => {
                if (!environment.production) {
                    console.log('res', res);
                }
                this.data = res;
                this.reset_to_zero('age18', 'age18_24', 'age25_34', 'age35_44', 'age45_54', 'age55_64', 'age65', 'total_age');
                res.forEach(element => {
                    this.age18 += Number(element.age18);
                    this.age18_24 += Number(element.age18_24);
                    this.age25_34 += Number(element.age25_34);
                    this.age35_44 += Number(element.age35_44);
                    this.age45_54 += Number(element.age45_54);
                    this.age55_64 += Number(element.age55_64);
                    this.age65 += Number(element.age65);
                });
                // tslint:disable-next-line:max-line-length
                this.total_age = Number(this.age18 + this.age18_24 + this.age25_34 + this.age35_44 + this.age45_54 + this.age55_64 + this.age65);
                if (!environment.production) {
                    console.log('data', this.age18, this.age18_24, this.age25_34,
                        this.age45_54, this.age55_64, this.age65, this.total_age);
                }
                this.category_data = [this.age18, this.age18_24, this.age25_34, this.age35_44, this.age45_54, this.age55_64, this.age65];
                this.showchart(this.category_data);
                this.time_generate_report = new Date();
            },
            (error) => {
                if (!environment.production) {
                    console.log(error);
                }
                this.blockUI.stop();
            },
            () => {
                this.blockUI.stop();
                const data_2 = {
                    organization_id: this.organization_id
                    , site_id: this.site_id
                    , start_time: this.startTime
                    , end_time: this.endTime
                    , start_date: this.start_date
                    , end_date: this.end_date
                    , time_period: this.time_period
                    , time_value: this.time_value
                    , view_by: this.viewDataBy
                };
                this.appservice.save_user_page_parametter(this.page_id, JSON.stringify(data_2));
            }
        );
    }
    /*----------  xuất excel  ----------*/
    exportExcel(): void {
        const data = {
            organization_id: this.organization_id
            , site_id: this.site_id
            , start_hour: '\'' + this.startTime + '\''
            , end_hour: '\'' + this.endTime + '\''
            , start_date: this.start_date
            , end_date: this.end_date
            , view_by: this.viewDataBy
        };
        this.blockUI.start('Đang xuất báo cáo...');
        this.appservice.post(data, environment.GENDERAGE.API.sp_poc_gender_metric_analytic + '_export_excel').subscribe(fileData => {
            window.open(this.url_api + fileData);
            this.name_of_excel = fileData;
            if (!environment.production) {
                console.log('Đã xuất file cả trong export laravel');
            }
        }, (error) => {
            this.blockUI.stop();
        },
            () => {
                this.blockUI.stop();
                const data2 = {
                    name_of_excel: this.name_of_excel
                };
                const url = environment.FBA.API.export_metrics_analytic + '_delete_excel';
                this.appservice.post(data2, url).subscribe(res => {
                    if (!environment.production) {
                        console.log('Đã xóa file trong public export laravel');
                    }
                });
            }
        );
    }
    showchart(category_data) {
        Highcharts.chart(this.container.nativeElement, {
            chart: { type: 'column' },
            title: { text: '' },
            subtitle: { text: '' },
            xAxis: { categories: ['18-', '18-24', '25-34', '35-44', '45-54', '55-64', '65+'] },
            yAxis: { min: 0, title: { text: '', align: '' }, labels: { overflow: '' }, allowDecimals: false, },
            tooltip: {
                useHTML: true,
                // tslint:disable-next-line:max-line-length
                headerFormat: '<div style="color:#0f0303;font-family:Roboto, sans-serif;font-size:12px;font-weight:bold;" >Độ tuổi: {point.key}</div>',
                // tslint:disable-next-line:max-line-length
                pointFormat: '<span  style= color:{point.color};"font-family:Roboto, sans-serif;font-size:11px;">Số lượng: {point.y} </span><br/>',
            },
            plotOptions: { bar: { dataLabels: { enabled: true } } },
            legend: {
                enabled: false, layout: 'vertical', align: 'right', verticalAlign: 'top', x: -40, y: 80, floating: false,
                borderWidth: 1, backgroundColor: ((Highcharts.theme && Highcharts.theme.legendBackgroundColor) || '#FFFFFF'),
                shadow: true
            },
            credits: { enabled: false },
            series: [{ name: '', data: category_data, color: environment.POC.colors.age, }]
        });
    }
    reset_session() {
        const data = [];
        this.appservice.save_user_page_parametter_by_nghia(this.page_id, JSON.stringify(data)).subscribe(res => {
            this.get_location_time();
        });
    }
}
