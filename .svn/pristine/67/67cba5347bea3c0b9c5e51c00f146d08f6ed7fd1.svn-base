import { Component, OnInit, ViewChild, ElementRef, TemplateRef } from '@angular/core';
import { Router } from '@angular/router';
import { environment } from '../../../../../environments/environment';
import { AppService } from '../../../../app.service';
// Import BlockUI decorator & optional NgBlockUI type
import { BlockUI, NgBlockUI } from 'ng-block-ui';
// chỉnh css angular
import { ViewEncapsulation } from '@angular/core';
// import Modal
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { GeneralMenuComponent } from '../../../viewchild/generalmenu/generalmenu.component';
import { NgForm, NgModel } from '@angular/forms';
import { NotifierService } from 'angular-notifier';
import { BehaviorSubject } from 'rxjs';
@Component({
  templateUrl: './vipcustomermanager.component.html',
  styleUrls: ['./vipcustomermanager.component.css'],
  // chỉnh css angular
  encapsulation: ViewEncapsulation.None
})
@ViewChild(GeneralMenuComponent)
export class VipCustomerManagerComponent implements OnInit {
  @ViewChild('update_staff_avatar') update_staff_avatar: ElementRef;
  @BlockUI() blockUI: NgBlockUI;
  private readonly notifier: NotifierService;
  public modalRef: BsModalRef;
  userInfo: Object; // thông tin người dùng
  // biến dành cho phần thêm ảnh thư viện
  library: Array<any>;
  activeRecord: Object;
  imageSource: string | Blob;
  // biến dùng cho load dữ liệu, thêm sửa xóa
  organizationArray: Array<any>;
  organizationId: number;
  urlImage: string; // đường dẫn lấy ảnh đại diện
  ImageUrll1: string | ArrayBuffer; // ảnh khi thêm mới, hoặc sửa
  dataUpdate: any;
  searchKey: string;
  siteSelectionDisplay: boolean; // trạng thái bật tắt của nút lọc site
  siteFilterDisplay: boolean; // trạng thái bật tắt của nút lọc site trong phần thêm nhân viên, sửa nhân viên  //= false
  canAdd: boolean; // trạng thái nút thêm mới
  data: Array<any>;
  dataFilter: Array<any>;
  webState: BehaviorSubject<any>;
  subcription: any;
  oldState: string;
  siteFilterModel: any;
  optionDelete: number;
  errorArray: Array<any>;
  recordDate: string;
  sourceUrl: string;
  constructor(private router: Router
    , notifierService: NotifierService
    , private appservice: AppService
    , private modalService: BsModalService) {
    this.notifier = notifierService;
  }
  ngOnInit(): void {
    this.set_default_value();
    const firstState = {
      data: null
      , state: null
    };
    this.webState = new BehaviorSubject(firstState);
    this.watchStateChange();
    this.get_organization();
  }
  watchStateChange() {
    this.subcription = this.webState.asObservable();
    this.subcription.subscribe(res => {
      const currentState = res.state;
      const item = res.data;
      // Đây là sự kiện khi vừa load trang get data về CRUD
      if (currentState === environment.STATE.retrieve) {
        // Sự kiện nhận dữ liệu về thì bỏ hành động tìm kiếm trước đó
        this.searchKey = null;
        this.data = item;
        this.dataFilter = this.data;
        // Nếu là sự kiện thêm mới
      } else if (currentState === environment.STATE.insert) {
        this.data.unshift(item);
        // Nếu trạng thái trước đó là search
        if (this.oldState === environment.STATE.search) {
          this.updateState(environment.STATE.search);
        }
        this.notifier.notify('success', 'Thêm mới dữ liệu thành công');
        // nếu là sự kiện sửa
      } else if (currentState === environment.STATE.update) {
        for (let i = 0; i < this.data.length; i++) {
          if (this.data[i].id === item.id) {
            this.data[i] = item;
            break;
          }
        }
        // Nếu trạng thái trước đó là search
        if (this.oldState === environment.STATE.search) {
          this.updateState(environment.STATE.search);
        }
        this.notifier.notify('success', 'Cập nhật dữ liệu thành công');
        // Nếu là sự kiện xóa
      } else if (currentState === environment.STATE.delete) {
        this.data.splice(this.data.findIndex(e => e.id === item.id), 1);
        // Nếu trạng thái trước đó là search
        if (this.oldState === environment.STATE.search) {
          this.updateState(environment.STATE.search);
        }
        this.notifier.notify('success', 'Xóa dữ liệu thành công');
        // Nếu có sự kiện tìm kiếm
      } else if (currentState === environment.STATE.search) {
        const string = this.searchKey ? this.searchKey.toLowerCase() : '';
        // console.log(string);
        if (string === '') {
          this.dataFilter = this.data;
        } else {
          this.dataFilter = this.data.filter(x => x.vip_name.toLowerCase().indexOf(string) !== -1
            || x.phone.toLowerCase().indexOf(string) !== -1);
        }
      }
    });
  }
  preventChange() {
    this.modalRef.hide();
    this.notifier.notify('error', 'Lỗi dữ liệu không được thay đổi');
  }
  updateState(stateString: string, data = null) {
    const stateWithData = {
      state: stateString
      , data: data
    };
    const oldStateObj = this.webState.getValue();
    this.oldState = oldStateObj.state;
    this.webState.next(stateWithData);
  }
  set_default_value() {
    this.userInfo = JSON.parse(localStorage.getItem(environment.UserLoged));
    this.siteSelectionDisplay = false;
    this.siteFilterDisplay = false;
    this.organizationArray = [];
    this.data = [];
    this.dataFilter = [];
    this.dataUpdate = null;
    this.canAdd = false;
    this.searchKey = null;
    this.urlImage = environment.apiUrl + 'images/vipcustomer/';
    this.optionDelete = 0;
    this.recordDate = null;
    this.sourceUrl = environment.API.vip_user;
  }
  get_organization() {
    this.blockUI.start('Đang tải dữ liệu...');
    const url = environment.API.userGetOrg;
    this.appservice.get(url).subscribe(
      param => {
        if (!environment.production) {
          // console.log('get_user_page_parametter', param);
        }
        if ('message' in param) {
          this.notifier.notify('error', 'Đã có lỗi xảy ra');
          return;
        }
        const org = param.organization_arr.slice(0);
        this.organizationArray = org;
        this.organizationId = param.organization_arr[0].value;
        this.get_data();
      },
      (error) => {
        if (!environment.production) {
          // console.log(error);
        }
        this.notifier.notify('error', 'Đã có lỗi xảy ra');
        this.blockUI.stop();
      });
  }
  get_data() {
    this.blockUI.start('Đang tải dữ liệu...');
    const data = {
      organization_id: this.organizationId
      , deleted: this.optionDelete
    };
    if (!environment.production) {
      // console.log('data gửi đi', data);
    }
    this.appservice.post(data, this.sourceUrl).subscribe(res => {
      if (!environment.production) {
        console.log(res);
      }
      this.canAdd = true;
      this.recordDate = res.recordDate;
      this.updateState('retrieve', res.retrieveData);
    },
      (error) => {
        if (!environment.production) {
          // console.log(error);
        }
        this.notifier.notify('error', 'Đã có lỗi xảy ra');
      }).add(() => {
        this.blockUI.stop();
      });
  }
  show_insert(template: TemplateRef<any>) {
    this.openModal(template);
    this.ImageUrll1 = null;
    console.log(this.ImageUrll1);
    this.errorArray = [];
    this.imageSource = null;
  }
  show_update(item: any, template: TemplateRef<any>) {
    this.dataUpdate = item;
    this.openModal(template);
    this.errorArray = [];
    this.imageSource = null;
  }
  // Hàm đệ quy menu
  // click hiện modal
  openModal(templates: TemplateRef<any>) {
    this.modalRef = this.modalService.show(templates, {
      backdrop: true,
      ignoreBackdropClick: true
    });
  }
  InsertUpload(event) {
    if (event.target.files && event.target.files[0]) {
      const file = event.target.files[0];
      const reader = new FileReader();
      reader.readAsDataURL(file);
      this.imageSource = file;
      reader.onload = (target) => {
        this.ImageUrll1 = reader.result;
      };
      event.target.value = '';
    }
  }
  UpdateUpload(event, update_staff_avatar) {
    if (event.target.files && event.target.files[0]) {
      const file = event.target.files[0];
      const reader = new FileReader();
      reader.readAsDataURL(file);
      this.imageSource = file;
      reader.onload = (target) => {
        update_staff_avatar.src = reader.result;
      };
      event.target.value = '';
    }
  }
  insertform(form: NgForm) {
    if (form.invalid) {
      this.notifier.notify('error', 'Có lỗi dữ liệu');
      return;
    }
    this.blockUI.start('Đang xử lý dữ liệu');
    const formData = new FormData();
    formData.append('organization_id', form.value.organization_id);
    formData.append('vip_name', form.value.vip_name);
    formData.append('phone', form.value.phone);
    formData.append('ngay_sinh', form.value.ngay_sinh);
    if (this.imageSource) {
      formData.append('avatar', this.imageSource);
    }
    const url = this.sourceUrl + '_insert';
    this.appservice.post(formData, url).subscribe(
      res => {
        if (!environment.production) {
          // console.log('dữ liệu gửi về', res);
        }
        if (res.message === 1) {
          delete res.insertedData.id;
          const transData = { ...res.insertedData, id: res.insertedData.gid };
          this.updateState(environment.STATE.insert, transData);
          this.modalRef.hide();
        } else {
          this.errorArray = this.appservice.validate_error(res);
          // console.log(this.error_array);
        }
      },
      (error) => {
        this.errorArray = ['Không thể kết nối máy chủ'];
      }).add(() => {
        this.blockUI.stop();
      });
  }
  // truyền dữ liệu popup
  getLibraryData(item: any, template: TemplateRef<any>) {
    // set default when open popup
    this.library = [];
    this.activeRecord = null;
    this.errorArray = [];
    // end set default
    this.dataUpdate = item;
    const data = {
      organization_id: this.organizationId
      , id: this.dataUpdate.id
      , type: 'vip_img'
    };
    this.blockUI.start('Đang tải dữ liệu ảnh thu thập');
    this.appservice._netPost(data, environment._netAPI.admin_staff_vip_blacklist_get_image).subscribe(res => {
      this.library = res.images;
      this.library.forEach((element: any, k: number) => {
        const stats = k + 1;
        element.image_name = 'Ảnh số ' + stats;
      });
      this.activeRecord = this.library[0];
      this.openModal(template);
    }, (error) => {
      this.notifier.notify('error', 'Không thể kết nối tới máy chủ');
    }).add(() => {
      this.blockUI.stop();
    });
  }
  updateform(form: NgForm) {
    if (form.invalid) {
      this.notifier.notify('error', 'Có lỗi dữ liệu');
      return;
    }
    this.blockUI.start('Đang xử lý dữ liệu');
    const formData = new FormData();
    formData.append('id', form.value.id);
    formData.append('vip_name', form.value.vip_name);
    formData.append('ngay_sinh', form.value.ngay_sinh);
    formData.append('actived', form.value.actived);
    if (form.controls.phone.dirty) {
      formData.append('phone', form.value.phone);
    }
    if (this.imageSource) {
      formData.append('avatar', this.imageSource);
    }
    const url = this.sourceUrl + '_update';
    this.appservice.post(formData, url).subscribe(
      res => {
        if (!environment.production) {
          // console.log('dữ liệu gửi về', res);
        }
        if (res.message === 1) {
          delete res.updatedData.id;
          const transData = { ...res.updatedData, id: res.updatedData.gid };
          // console.log(transData);
          this.updateState(environment.STATE.update, transData);
          this.modalRef.hide();
        } else {
          this.errorArray = this.appservice.validate_error(res);
          // console.log(this.error_array);
        }
      },
      (error) => {
        this.errorArray = ['Không thể kết nối máy chủ'];
      }).add(() => {
        this.blockUI.stop();
      });
  }
  change_site(item: any) {
    if (item.enables !== '1') {
      this.notifier.notify('error', 'Dữ liệu không hợp lệ');
      return;
    }
    // Nếu chọn site là cửa hàng thì được phép thêm mới
    if (item.store === '1') {
      this.canAdd = true;
    } else {
      this.canAdd = false;
    }
    this.siteFilterModel = item;
    this.siteFilterDisplay = false;
    this.get_data();
  }
  search_item(searchString: string) {
    this.searchKey = searchString;
    this.updateState(environment.STATE.search);
  }
  show_delete(item: any, template: TemplateRef<any>) {
    this.dataUpdate = item;
    this.openModal(template);
  }
  soft_delete_object(template: TemplateRef<any>) {
    this.blockUI.start('Đang xử lý dữ liệu');
    const data = {
      id: this.dataUpdate.id
      , type: 'vip'
    };
    const url = environment._netAPI.admin_staff_vip_blacklist_soft_delete;
    this.appservice._netPost(data, url).subscribe(
      param => {
        if (param.status) {
          this.updateState('delete', this.dataUpdate);
        } else {
          this.notifier.notify('error', 'Lỗi bên Server');
        }
      },
      (error) => {
        this.notifier.notify('error', 'Đã có lỗi xảy ra');
      }).add(() => {
        this.modalRef.hide();
        this.blockUI.stop();
      });
  }
  rollback_object(template: TemplateRef<any>) {
    this.blockUI.start('Đang xử lý dữ liệu');
    const data = {
      id: this.dataUpdate.id
      , type: 'vip'
    };
    const url = environment._netAPI.admin_staff_vip_blacklist_rollback_data;
    this.appservice._netPost(data, url).subscribe(
      param => {
        if (param.status) {
          this.updateState('delete', this.dataUpdate);
        } else {
          this.notifier.notify('error', 'Lỗi bên Server');
        }
      },
      (error) => {
        this.notifier.notify('error', 'Đã có lỗi xảy ra');
      }).add(() => {
        this.modalRef.hide();
        this.blockUI.stop();
      });
  }
  trigger_click(upload) {
    const event: Event = new Event('click');
    upload.click();
  }
  getUploadData(event) {
    if (event.target.files && event.target.files[0]) {
      // xét biến lỗi về mặc định
      this.errorArray = [];
      //
      const file = event.target.files[0];
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = (target) => {
        this.blockUI.start('Đang xử lý ảnh');
        const data = {
          organization_id: this.organizationId
          , id: this.dataUpdate.id
          , type: 'vip_img'
          , list_image_face: [{
            id: '00000000-0000-0000-0000-000000000000'
            , image_base64: String(reader.result).replace('data:image/jpeg;base64,', '')
          }]
        };
        const _netUrl = environment._netAPI.admin_staff_vip_blacklist_add_image;
        this.appservice._netPost(data, _netUrl).subscribe(
          para => {
            if (!environment.production) {
              console.log('dữ liệu gửi về', para);
            }
            if (para.status) {
              const requestData = {
                organization_id: this.organizationId
                , site_id: this.dataUpdate.site_id
                , id: this.dataUpdate.id
                , type: 'vip_img'
              };
              this.blockUI.start('Đang tải dữ liệu ảnh thu thập');
              this.appservice._netPost(requestData, environment._netAPI.admin_staff_vip_blacklist_get_image).subscribe(res => {
                this.library = res.images;
                this.library.forEach((element: any, k: number) => {
                  element.image_name = 'Ảnh số ' + k;
                });
                this.activeRecord = this.library[0];
              }, (error) => {
                this.notifier.notify('error', 'Không thể kết nối tới máy chủ');
              }).add(() => {
                this.blockUI.stop();
              });
            } else {
              this.errorArray = ['Ảnh không đủ tiêu chuẩn'];
            }
          },
          (error) => {
            if (!environment.production) {
              console.log(error);
            }
          }).add(() => {
            this.blockUI.stop();
          });
      };
      event.target.value = '';
    }
  }
  delete_from_library(active_record: any, uploadform) {
    const c = confirm('Bạn đồng ý xóa?');
    if (c) {
      // Xét biến lỗi về mặc định
      this.errorArray = [];
      //
      const data = {
        id: active_record.id
        , staff_id: this.dataUpdate.id
        , type: 'vip_img'
      };
      this.appservice._netPost(data, environment._netAPI.admin_staff_vip_blacklist_delete_image).subscribe(para => {
        if (para.status) {
          const requestData = {
            organization_id: this.organizationId
            , id: this.dataUpdate.id
            , type: 'vip_img'
          };
          this.appservice._netPost(requestData, environment._netAPI.admin_staff_vip_blacklist_get_image).subscribe(res => {
            this.library = res.images;
            this.library.forEach((element: any, k: number) => {
              const stats = k + 1;
              element.image_name = 'Ảnh số ' + stats;
            });
            this.activeRecord = this.library[0];
          }, (error) => {
            this.notifier.notify('error', 'Không thể kết nối tới máy chủ');
          }).add(() => {
            this.blockUI.stop();
          });
        } else {
          this.errorArray = ['Quá trình xử lý ảnh không thành công'];
        }
      }, (error) => {
        this.errorArray = ['Không thể kết nối tới máy chủ'];
      }).add(() => {
        this.blockUI.stop();
      });
    }
  }

}



