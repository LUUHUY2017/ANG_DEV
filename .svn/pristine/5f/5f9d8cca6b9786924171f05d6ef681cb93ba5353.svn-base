import { IOption } from 'ng-select';
import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';
import { Router } from '@angular/router';
import { environment } from '../../../../environments/environment';
import { AppService } from '../../../app.service';
// Import BlockUI decorator & optional NgBlockUI type
import { BlockUI, NgBlockUI } from 'ng-block-ui';
// highcharts
import Highcharts from 'highcharts';
import More from 'highcharts/highcharts-more';
import Tree from 'highcharts/modules/treemap';
import Heatmap from 'highcharts/modules/heatmap';
More(Highcharts);
Tree(Highcharts);
Heatmap(Highcharts);
import { TimeperiodComponent } from '../../viewchild/timeperiod/timeperiod.component';
import { MenutreeComponent } from '../../viewchild/menutree/menutree.component';
import { log } from 'util';

@Component({
    templateUrl: 'metrics-comparison.component.html',
    styleUrls: ['metrics-comparison.component.scss']
})

export class FootfallMetricsComparisonComponent implements OnInit {
    @ViewChild('container', { read: ElementRef }) container: ElementRef;
    @ViewChild(TimeperiodComponent) TimeInput: TimeperiodComponent;
    @ViewChild(MenutreeComponent) MenuInput: MenutreeComponent;
    total_num_to_enter = 0;
    total_traffic = 0;
    total_avg_time = 0;
    viewDataBy: string;
    @BlockUI() blockUI: NgBlockUI;
    siteSelectionDisplay = false;
    organization_id: string;
    time_period_array: any[];
    organization_array: any[];
    site_id: any;
    start_date: any;
    end_date: any;
    time_value = '';
    public page_id = environment.Pages.footfall.metrics_comparison;
    // public navItems = navItems;
    public sidebarMinimized = true;
    protected changes: MutationObserver;
    public element: HTMLElement = document.body;
    public userinfo: any = JSON.parse(localStorage.getItem(environment.UserLoged));
    start_time: string;
    end_time: string;
    public chart_data: any[];
    public startTimeOption: Array<IOption>;
    public endTimeOption: Array<IOption>;
    btnApplyValid = false;
    dropdownList = [];
    sourceSelectedItems = [];
    destinationSelectedItems = [];
    sourceIndexOptionSettings = {
        singleSelection: true,
        idField: 'item_id',
        textField: 'item_text',
        selectAllText: 'Select All',
        unSelectAllText: 'UnSelect All',
        itemsShowLimit: 1,
        allowSearchFilter: false
    };
    destinationIndexOptionSettings = {
        singleSelection: false,
        idField: 'item_id',
        textField: 'item_text',
        // groupBy: 'value',
        selectAllText: 'Select All',
        unSelectAllText: 'UnSelect All',
        itemsShowLimit: 1,
        allowSearchFilter: false
    };
    operation = 'SUM';
    time_generate_report = new Date();
    dropdownList_compare: any[];
    menu_tree: any[];
    total_passer_by = 0;
    total_shopper_visits = 0;
    total_kids_visits: number;
    total_turn_in_rate: number;
    constructor(protected router: Router, protected appservice: AppService) {
        // thêm mới
        this.changes = new MutationObserver((mutations) => {
            this.sidebarMinimized = document.body.classList.contains('sidebar-minimized');
        });
        this.changes.observe(<Element>this.element, { attributes: true });
    }
    url_api = environment.apiUrl + 'exports/';
    name_of_excel: any;
    site_name: string;
    title_start_date: string;
    title_end_date: string;
    time_period: string;
    title_time_period: string;
    starttime: string;
    endtime: string;
    view: string;

    ngOnInit() {
        this.get_page_param();
    }
    get_page_param() {
        this.blockUI.start('Đang tải cấu hình...');
        this.appservice.get_user_page_parametter(this.page_id).subscribe(
            param => {
                try {
                    if (!environment.production) {
                        console.log('get_user_page_parametter', param);
                    }
                    let para = null;
                    if (param.user_page_parametter.length > 0 || !this.appservice.isEmptyObject(param.user_page_parametter)) {
                        para = param.user_page_parametter;
                    } else {
                        para = this.set_default();
                    }

                    this.dropdownList = [];
                    param.traffic_index.forEach((element, index) => {
                        this.dropdownList.push({
                            item_id: index
                            , item_text: element.value
                            , visible: true
                        });
                    });

                    this.destinationSelectedItems = this.dropdownList.filter((item) => {
                        let boolean: boolean;
                        para.indexOptionSelected_compare.forEach((element, index, array) => {
                            if (item.item_id === element) {
                                boolean = true;
                            }
                            if (index === (array.length - 1) && boolean === undefined) {
                                boolean = false;
                            }
                        });
                        return boolean;
                    });
                    if (!environment.production) {
                        console.log('para', para, ' this.destinationSelectedItems', this.destinationSelectedItems);
                    }
                    this.viewDataBy = para.view_by;
                    this.time_period_array = param.fba_time_period_metrics;
                    this.organization_array = param.organization_arr;
                    this.startTimeOption = param.start_time_list;
                    this.endTimeOption = param.end_time_list;
                    this.organization_id = para.organization_id;
                    if ('site_id' in para) {
                        this.site_id = para.site_id;
                    }
                    this.start_time = para.start_time;
                    this.end_time = para.end_time;
                    this.operation = para.operation;
                    if (para.time_value) {
                        this.get_date(para.time_value);
                    } else if (para.start_date && para.end_date) {
                        this.start_date = para.start_date;
                        this.end_date = para.end_date;
                        this.start_time = this.start_time.replace(/[']/g, '');
                        this.end_time = this.end_time.replace(/[']/g, '');
                    }
                    this.TimeInput.get_data(para, this.time_period_array);
                    this.get_sitetree();
                } catch (error) {
                    this.blockUI.stop();
                }
            }, (error) => {
                this.blockUI.stop();
            }, () => {
            }
        );
    }

    get_date(time_value) {
        const time_array = this.TimeInput.get_time(time_value);
        this.start_date = this.appservice.convert_date_tostring(time_array.ngaybatdau);
        this.end_date = this.appservice.convert_date_tostring(time_array.ngayketthuc);
        this.time_value = time_value;
    }

    set_default() {
        const organization_id = this.userinfo.organization_id === '0' ? 6 : Number(this.userinfo.organization_id);
        return {
            organization_id: organization_id
            // , site_id: 0
            , start_time: '00:00'
            , end_time: '23:59'
            , time_value: 'today'
            , view_by: 'Hour'
            , operation: this.operation
            , indexOptionSelected: [0]
            , indexOptionSelected_compare: [1, 2]
        };
    }

    get_data() {
        this.blockUI.start('Đang tải dữ liệu...');
        const indexOptionSelected = [];
        // this.sourceSelectedItems.forEach(element => {
        //     indexOptionSelected.push(element.item_id);
        // });
        const indexOptionSelected_compare = [];
        this.destinationSelectedItems.forEach(element => {
            indexOptionSelected_compare.push(element.item_id);
        });
        const data = {
            organization_id: this.organization_id
            , site_id: this.site_id
            , start_time: '\'' + this.start_time + '\''
            , end_time: '\'' + this.end_time + '\''
            , start_date: this.start_date
            , end_date: this.end_date
            , view_by: this.viewDataBy
            , operation: this.operation
            , indexOptionSelected: indexOptionSelected
            , indexOptionSelected_compare: indexOptionSelected_compare
        };
        if (!environment.production) {
            // console.log('data', data);
        }
        this.starttime = this.startTimeOption.find(item => item.value === this.start_time).label;
        this.endtime = this.endTimeOption.find(item => item.value === this.end_time).label;
        // tslint:disable-next-line:max-line-length
        this.view = this.viewDataBy === 'Day' ? 'Ngày' : this.viewDataBy === 'Week' ? 'Tuần' : this.viewDataBy === 'Month' ? 'Tháng' : this.viewDataBy === 'Year' ? 'Năm' : 'Giờ';
        this.time_generate_report = new Date();
        this.appservice.post(data, environment.API.sp_poc_data_in_out_sum_by_site).subscribe(
            res => {
                // console.log('res', res);
                this.site_name = this.MenuInput.menu_tree.find(item => item.id === this.site_id).site_name;

                const start_d = new Date(this.start_date.replace(/[']/g, '').replace(/[-]/g, '/'));
                const end_d = new Date(this.end_date.replace(/[']/g, '').replace(/[-]/g, '/'));
                this.title_start_date = this.appservice.convert_date_tostringdate_by_nghia(start_d, false);
                this.title_end_date = this.appservice.convert_date_tostringdate_by_nghia(end_d, false);
                if (this.start_date !== this.end_date) {
                    this.time_period = this.title_start_date + ' - ' + this.title_end_date;
                } else { this.time_period = this.title_start_date; }

                this.title_time_period = 'Ngày';
                this.chart_data = res;
                this.reset_to_zero('total_num_to_enter', 'total_traffic', 'total_avg_time', 'total_passer_by',
                    'total_kids_visits', 'total_turn_in_rate', 'total_shopper_visits');
                res.forEach(element => {
                    this.total_num_to_enter += Number(element.num_to_enter);
                    this.total_traffic += Number(element.traffic);
                    this.total_avg_time += Number(element.avg_time);
                    this.total_passer_by += Number(element.passer_by);
                    this.total_kids_visits += Number(element.kids_visits);
                    this.total_turn_in_rate += Number(element.turn_in_rate);
                    this.total_shopper_visits += Number(element.shopper_visits);
                });
                const row = Number(res.length);
                this.total_avg_time = Number((this.total_avg_time * 60 / row).toFixed(0));
                // this.total_kids_visits = Number((this.total_kids_visits / row).toFixed(2));
                this.total_turn_in_rate = Number((this.total_turn_in_rate / row).toFixed(2));
            }, (error) => {
                // console.log(error);
                this.blockUI.stop(); // Stop blocking
            }, () => {
                // Show chart
                let save_data;
                if (this.time_value !== '') {
                    const data_2 = {
                        organization_id: this.organization_id
                        , site_id: this.site_id
                        , start_time: this.start_time
                        , end_time: this.end_time
                        , time_value: this.time_value
                        , view_by: this.viewDataBy
                        , operation: this.operation
                        , indexOptionSelected: indexOptionSelected
                        , indexOptionSelected_compare: indexOptionSelected_compare
                    };
                    save_data = data_2;
                } else {
                    save_data = data;
                }
                this.appservice.save_user_page_parametter(this.page_id, JSON.stringify(save_data));
                this.loadHightChart();
                this.blockUI.stop(); // Stop blocking
            }
        );
    }

    reset_to_zero(...array) {
        array.forEach(element => { this[element] = 0; });
    }

    toHHMMSS(totalSeconds) {
        const hh = Math.floor(totalSeconds / 3600).toFixed(0);
        totalSeconds %= 3600;
        const mm = Math.floor(totalSeconds / 60).toFixed(0);
        const sc = (totalSeconds % 60).toFixed(0);
        const m = String(mm).padStart(2, '00');
        const h = String(hh).padStart(2, '00');
        const s = String(sc).padStart(2, '00');
        return h + ':' + m + ':' + s;
    }

    toMM = (secs) => {
        const minutes = Math.floor(secs / 60);
        return minutes;
    }

    destinationOnSelect(item: any) {
        this.validate_source_destination_index();
    }
    destinationOnDeSelect(items: any) {
        this.validate_source_destination_index();
    }
    destinationOnSelectAll(items: any) {
        // this.validate_source_destination_index();
        this.btnApplyValid = false;
    }
    destinationOnDeSelectAll(items: any) {
        // this.validate_source_destination_index();
        this.btnApplyValid = true;
    }
    validate_source_destination_index() {
        this.btnApplyValid = !(this.destinationSelectedItems.length > 0);
    }

    exportExcel(): void {
        const data = {
            organization_id: this.organization_id
            , site_id: this.site_id
            , start_time: '\'' + this.start_time + '\''
            , end_time: '\'' + this.end_time + '\''
            , start_date: this.start_date
            , end_date: this.end_date
            , view_by: this.viewDataBy
            , operation: this.operation
            , export: 'sosanh'
        };
        this.blockUI.start('Đang xuất báo cáo...');
        this.appservice.post(data, environment.API.sp_poc_data_in_out_sum_by_site + '_export_excel').subscribe(fileData => {
            window.open(this.url_api + fileData);
            this.name_of_excel = fileData;
            if (!environment.production) {
                console.log('Successed');
            }
        }, (error) => {
            this.blockUI.stop();
        }, () => {
            this.blockUI.stop();
            const data2 = {
                name_of_excel: this.name_of_excel
            };
            const url = environment.FBA.API.export_metrics_analytic + '_delete_excel';
            this.appservice.post(data2, url).subscribe(res => {
                if (!environment.production) {
                    console.log('Deleted');
                }
            });
        }
        );
    }

    change_view() {
        this.get_data();
    }

    loadHightChart() {
        const color = environment.POC.colors;
        let i = 0;
        const chart_xAxis = [];
        const num_to_enter = [];
        const traffic = [];
        const avg_time = [];
        const passer_by = [];
        const kids_visits = [];
        const turn_in_rate = [];
        const shopper_visits = [];
        this.chart_data.forEach(element => {
            chart_xAxis[i] = element.time_period;
            num_to_enter[i] = Number(element.num_to_enter);
            traffic[i] = Number(element.traffic);
            avg_time[i] = this.toMM(Number(element.avg_time));
            avg_time[i] = (Number(element.avg_time));
            passer_by[i] = (Number(element.passer_by));
            kids_visits[i] = (Number(element.kids_visits));
            turn_in_rate[i] = (Number(element.turn_in_rate));
            shopper_visits[i] = (Number(element.shopper_visits));
            i++;
        });
        this.dropdownList.forEach(function (value) {
            value.visible = false;
        });
        if (this.destinationSelectedItems.length > 0) {
            for (const value of this.dropdownList) {
                for (const value1 of this.destinationSelectedItems) {
                    if (value.item_text === value1.item_text) {
                        value.visible = true;
                    }
                }
            }
        }
        const selft = this;
        Highcharts.chart(this.container.nativeElement, {
            chart: { height: 500, style: { fontFamily: '"Lucida Grande", "Lucida Sans Unicode", sans-serif !important;', } },
            title: { text: '' },
            subtitle: {
                useHTML: true, align: 'left', y: 0,
                // tslint:disable-next-line:max-line-length
                text: '<span style="font-size:11px;font-family:Roboto, sans-serif; color: #7b7b7b">' + this.site_name + ' ' + ' ' + this.starttime + '  -  ' + this.endtime + ' ' + ' ' + this.title_time_period + ':' + ' ' + ' ' + this.time_period + ', ' + ' ' + ' xem theo: ' + this.view + '</span> '
            },
            xAxis: [{
                labels: { rotation: -45, style: { fontSize: '90%', fontFamily: 'Roboto, sans-serif' } },
                categories: chart_xAxis, crosshair: true
            }],
            tooltip: { shared: true, distance: 80, padding: 10, }, legend: { itemStyle: { width: 350 } },
            plotOptions: { series: {}, column: { borderRadius: 2.5, minPointLength: 0 } },
            navigation: { buttonOptions: { align: 'right', verticalAlign: 'bottom', y: -8 } },
            yAxis: [
                {
                    //     labels: { formatter() { return this.axis.defaultLabelFormatter.call(this); }, style: { color: color.male } },
                    //     allowDecimals: false, title: { text: '', style: { color: color.male } },
                    //     min: 0, visible: true, showEmpty: false,
                    // }, {
                    //     labels: { formatter() { return this.axis.defaultLabelFormatter.call(this); }, style: { color: color.male } },
                    //     allowDecimals: false, title: { text: '', style: { color: color.male } },
                    //     min: 0, visible: true, opposite: true, showEmpty: false,
                    // }, {
                    labels: { formatter() { return this.axis.defaultLabelFormatter.call(this); }, style: { color: color.passer_by } },
                    allowDecimals: false, title: { text: 'PasserBy', style: { color: color.passer_by, fontWeight: 'bold' } },
                    min: 0, maxPadding: 0, minPadding: 0, visible: this.dropdownList[0].visible, showEmpty: false,
                }, {
                    labels: { formatter() { return this.axis.defaultLabelFormatter.call(this); }, style: { color: color.visits } },
                    allowDecimals: false, title: { text: 'Visits', style: { color: color.visits, fontWeight: 'bold' } },
                    min: 0, maxPadding: 0, minPadding: 0, visible: this.dropdownList[1].visible, showEmpty: false,
                }, {
                    labels: { formatter() { return this.axis.defaultLabelFormatter.call(this); }, style: { color: color.shopper_visits } },
                    allowDecimals: false, title: { text: 'Shopper Visits', style: { color: color.shopper_visits, fontWeight: 'bold' } },
                    min: 0, maxPadding: 0, minPadding: 0, visible: this.dropdownList[2].visible, showEmpty: false,
                }, {
                    labels: { formatter() { return this.axis.defaultLabelFormatter.call(this); }, style: { color: color.traffic_flow } },
                    allowDecimals: false, title: { text: 'Traffic flow', style: { color: color.traffic_flow, fontWeight: 'bold' } },
                    min: 0, maxPadding: 0, minPadding: 0, visible: this.dropdownList[6].visible, showEmpty: false,
                }, {
                    labels: { formatter() { return this.axis.defaultLabelFormatter.call(this); }, style: { color: color.kids_visits } },
                    allowDecimals: false, title: { text: 'Kids Visits', style: { color: color.kids_visits, fontWeight: 'bold' } },
                    min: 0, maxPadding: 0, minPadding: 0, visible: this.dropdownList[4].visible, showEmpty: false,
                }, {
                    labels: { formatter() { return this.axis.defaultLabelFormatter.call(this); }, style: { color: color.turn_in_rate } },
                    allowDecimals: false, title: { text: 'Turn in rate (%)', style: { color: color.turn_in_rate, fontWeight: 'bold' } },
                    opposite: true, visible: this.dropdownList[3].visible, showEmpty: false, min: 0, maxPadding: 0, minPadding: 0,
                }, {
                    title: { text: 'Avg Time (min)', style: { color: color.avg_time, fontWeight: 'bold' } }, allowDecimals: false,
                    labels: { format: '{value} ', style: { color: color.avg_time, } },
                    min: 0, maxPadding: 0, minPadding: 0, opposite: true, visible: this.dropdownList[5].visible, showEmpty: false,
                }
            ],
            series: [
                {
                    name: 'PasserBy', color: color.passer_by, type: 'column', yAxis: 0, data: passer_by,
                    showInLegend: this.dropdownList[0].visible, visible: this.dropdownList[0].visible,
                }, {
                    name: 'Visits', color: color.visits, type: 'column',
                    yAxis: 1, data: num_to_enter, showInLegend: this.dropdownList[1].visible, visible: this.dropdownList[1].visible,
                }, {
                    name: 'Shopper Visits', color: color.shopper_visits, type: 'column',
                    yAxis: 2, data: shopper_visits, showInLegend: this.dropdownList[2].visible, visible: this.dropdownList[2].visible,
                }, {
                    name: 'Kids Visits', color: color.kids_visits, type: 'column',
                    yAxis: 4, data: kids_visits, showInLegend: this.dropdownList[4].visible, visible: this.dropdownList[4].visible,
                }, {
                    name: 'Traffic flow', color: color.traffic_flow, type: 'column', yAxis: 3, data: traffic,
                    showInLegend: this.dropdownList[6].visible, visible: this.dropdownList[6].visible,
                }, {
                    name: 'Avg Time (min)', color: color.avg_time, type: 'spline', yAxis: 6, data: avg_time,
                    // tslint:disable-next-line:max-line-length
                    tooltip: { pointFormatter: function () { const point = this; return '<span style="color:' + point.color + '">\u25CF</span> ' + point.series.name + ': <b>' + selft.toHHMMSS(point.y * 60) + '</b><br/>'; } },
                    showInLegend: this.dropdownList[5].visible, visible: this.dropdownList[5].visible,
                }, {
                    name: 'Turn in rate (%)', color: color.turn_in_rate, type: 'spline',
                    yAxis: 5, data: turn_in_rate, showInLegend: this.dropdownList[3].visible, visible: this.dropdownList[3].visible,
                }
            ]
        });
    }

    Go_number(number, total) {
        let tong = 0;
        if (total !== 0) {
            tong = ((Number(number) / total) * 100); return tong.toFixed(2);
        }
        return tong;
    }

    get_sitetree() {
        this.blockUI.start('Đang tải thông tin tổ chức...');
        const url = environment.API.sites + '_get_site_for_report';
        const data = {
            organization_id: this.organization_id
        };
        this.appservice.post(data, url).subscribe(res => {
            // console.log(res);
            this.menu_tree = res.site_array.slice(0);
            if (!this.site_id) {
                this.site_id = this.menu_tree.find(item => Number(item.enables) === 1).id;
            }
            this.MenuInput.get_data(this.menu_tree, this.site_id, this.organization_array, this.organization_id);

        },
            (error) => {
                this.blockUI.stop();
                if (!environment.production) {
                    // console.log(error);
                }
            },
            () => {
                this.blockUI.stop();
                this.get_data();
            }
        );
    }

    // Nghĩa thêm function get emit data
    get_date_from_emit(event) {
        if (event[0].start_date && event[0].end_date) {
            this.start_date = event[0].start_date;
            this.end_date = event[0].end_date;
            this.time_value = '';
        } else if (event[0].time_value) {
            this.time_value = event[0].time_value;
            // console.log(this.time_value);
            this.get_date(this.time_value);
        }
    }

    reset_session() {
        const data = [];
        this.appservice.save_user_page_parametter_by_nghia(this.page_id, JSON.stringify(data)).subscribe(res => {
            this.get_page_param();
            this.time_generate_report = new Date();
        });
    }

    get_emit_menu(event) {
        if (event.organization_id) {
            this.blockUI.start('Đang tải thông tin tổ chức...');
            const data = {
                organization_id: event.organization_id
            };
            const url = environment.API.sites + '_get_site_for_report';
            this.appservice.post(data, url).subscribe(res => {
                // console.log(res);
                this.menu_tree = res.site_array.slice(0);
                this.organization_id = event.organization_id;
                this.site_id = this.menu_tree[0].id;
                this.MenuInput.get_data(this.menu_tree, this.site_id, this.organization_array, this.organization_id);
                this.get_data();
            }, (error) => {
                this.blockUI.stop();
                if (!environment.production) {
                    // console.log(error);
                }
            }, () => {
                this.blockUI.stop();
            });
        } else if (event.site_id || event.site_id === 0) {
            this.site_id = event.site_id;
        }
    }
}
