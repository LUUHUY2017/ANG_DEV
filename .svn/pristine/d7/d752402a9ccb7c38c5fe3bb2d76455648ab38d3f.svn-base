import { Component, OnInit } from '@angular/core';
import { environment } from '../../../../../environments/environment';
import { AppService } from '../../../../app.service';
import { Router } from '@angular/router';
import { SettingService } from '../setting.service';
import { ActivatedRoute } from '@angular/router';

// Import BlockUI decorator & optional NgBlockUI type
import { BlockUI, NgBlockUI } from 'ng-block-ui';
@Component({
  selector: 'app-editsetting',
  templateUrl: './editsetting.component.html',
  styleUrls: ['./editsetting.component.css']
})
export class AdminEditSettingComponent implements OnInit {
  status = 1;
  fileToUpload_1: File = null;
  fileToUpload_2: File = null;
  @BlockUI() blockUI: NgBlockUI;
  data = [];
  url_img = environment.apiUrl + 'images/fba/';
  userInfo = JSON.parse(localStorage.getItem(environment.UserLoged));
  any_require: BinaryType;
  can_update = false;
  // tslint:disable-next-line:max-line-length
  constructor(private appservice: AppService, private router: Router, private setting: SettingService, private activerouter: ActivatedRoute) { }
  ngOnInit() {
    this.getdata();
    this.update_data_permission();
  }
  update_data_permission() {
    const is_admin_of_organization = JSON.parse(localStorage.getItem(environment.is_admin_organization));
    if (!environment.production) {
      console.log(is_admin_of_organization);
    }
    if (is_admin_of_organization.length > 0 || Number(this.userInfo.lever) === 0) {
      this.can_update = true;
    }
  }
  getdata() {
    this.blockUI.start('Đang tải dữ liệu ...');
    const url = environment.FBA.API.fba_application_settings + '_update/' + this.activerouter.snapshot.params.id;
    this.appservice.get(url).subscribe(res => {
      if (!environment.production) {
        console.log(res);
      }
      this.data = res.data;
    },
    (error) => {
      this.blockUI.stop();
      this.blockUI.start('Lỗi không tải được dữ liệu');
    },
    () => {
      this.blockUI.stop();
    });
  }
  change_status(value) {
    this.status = value;
  }
  readURL(event, number: number) {
    if (event.target.files && event.target.files[0]) {
        const file = event.target.files[0];
        const reader = new FileReader();
        reader.onload = e => this['imageSrc_' + number] = reader.result;
        reader.readAsDataURL(file);
    }
  }
  handleFileInput(file: FileList, number: Number) {
    this['fileToUpload_' + number] = file.item(0);
    if (!environment.production) {
      console.log(this['fileToUpload_' + number]);
    }
  }
  edit_setting(item) {
    if (!environment.production) {
      console.log(item);
    }
    this.blockUI.start('Đang xử lý dữ liệu...');
    const data: FormData = new FormData();
    if (this.fileToUpload_1 !== null) {
      data.append('company_logo', this.fileToUpload_1, this.fileToUpload_1.name);
    }
    if (this.fileToUpload_2 !== null) {
      data.append('application_logo', this.fileToUpload_2, this.fileToUpload_2.name);
    }
    data.append('data', JSON.stringify(item.value));
    data.append('access_token', localStorage.getItem(environment.access_token));
    const url = environment.FBA.API.fba_application_settings + '_update/' + this.activerouter.snapshot.params.id;
    this.appservice.post(data, url).subscribe(res => {
      if (!environment.production) {
        console.log(res);
      }
      this.blockUI.stop();
      if (res.message === 1) {
        this.setting.message.push({
          message_info: 'Sửa thông tin thành công',
          alert: 'success'
        });
        this.router.navigate(['/fba/setting/setting']);
      } else {
        this.setting.message.push({
          message_info: 'Có lỗi xảy ra',
          alert: 'danger'
        });
        this.router.navigate(['/fba/setting/setting']);
      }
    },
    (error) => {
      this.blockUI.stop();
    },
    () => {
      this.blockUI.stop();
    });
  }
}
