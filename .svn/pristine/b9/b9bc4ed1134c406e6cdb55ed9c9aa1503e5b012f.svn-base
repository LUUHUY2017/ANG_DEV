import { Component, OnInit, ViewEncapsulation, TemplateRef, ViewChild } from '@angular/core';
import { NotificationService } from '../notification.service';
import { BlockUI, NgBlockUI } from 'ng-block-ui';
import { environment } from '../../../../../environments/environment';
import { AppService } from '../../../../app.service';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { FbaMenuComponent } from '../../../viewchild/fbamenu/fbamenu.component';
import { language } from '../../../../language';
import { language_en } from '../../../../language_en';

@Component({
  selector: 'app-notification',
  templateUrl: './notification.component.html',
  styleUrls: ['./notification.component.css'],
  encapsulation: ViewEncapsulation.Emulated,
})

export class NotificationComponent implements OnInit {
  @ViewChild(FbaMenuComponent)
  public modalRef: BsModalRef;
  init_table = false;
  @BlockUI() blockUI: NgBlockUI;
  message = [];
  url_img = environment.apiUrl + 'images/fba/';
  listofnotification: any;
  userlogged = Number(JSON.parse(localStorage.getItem(environment.UserLoged)).lever);
  page_id = environment.Pages.fba.fba_notifications;
  pagination_number = 5;
  cols: any;
  show_edit = false;
  detail_data: any;
  type_language = JSON.parse(localStorage.getItem(environment.language));
  language: any;
  page_permission = JSON.parse(localStorage.getItem(environment.expert_page_permission));
  constructor(private Notification: NotificationService
    , private appservice: AppService
    , private modalService: BsModalService) {
    this.type_language === 'vn' ? this.language = language : this.language = language_en;
    this.cols = [
      { field: 'id', header: this.language.STT },
      { field: 'organization_name', header: this.language.ten_to_chuc },
      { field: 'notification_number', header: this.language.dieu_kien_gui_thong_bao },
      { field: 'action', header: 'Action' }
    ];
  }
  ngOnInit() {
    this.get_data();
    this.check_edit();
    // this.get_crud_in_page();
  }
  check_edit() {
    if (!environment.production) {
      console.log(this.page_permission);
    }
    if (this.page_permission.length > 0) {
      this.show_edit = true;
    }
  }
  openModal(templates: TemplateRef<any>, item) {
    // console.log(item);
    this.detail_data = item;
    this.modalRef = this.modalService.show(templates, {
      backdrop: true,
      ignoreBackdropClick: true
    });
  }
  // get_crud_in_page() {
  //   const data = {
  //     page_id: '\'' + this.page_id + '\''
  //   };
  //   const url = environment.FBA.ADMIN.get_crud_page;
  //   this.appservice.post(data, url).subscribe(res => {
  //     if (!environment.production) {
  //       console.log(res);
  //       res.crud_page_array.forEach(element => {
  //       });
  //     }
  //   },
  //   (error) => {
  //     this.blockUI.stop();
  //   },
  //   () => {
  //     this.blockUI.stop();
  //   });
  // }
  delete_data(id: number) {
    this.blockUI.start(this.language.dang_xu_ly_du_lieu);
    const data = {
      id: Number(id)
    };
    const url = environment.FBA.API.fba_notifications + '_delete';
    this.appservice.post(data, url).subscribe(res => {
      if (!environment.production) {
        console.log(res);
      }
      if (res.message === 1) {
        this.get_data();
        this.Notification.message.push({
          message_info: this.language.ban_da_xoa_thanh_cong,
          alert: 'success'
        });
      }
    },
      (error) => {
        this.blockUI.stop();
      },
      () => {
        this.blockUI.stop();
      });
  }
  get_data() {
    this.blockUI.start(this.language.dang_tai_du_lieu);
    this.appservice.get(environment.FBA.API.fba_notifications).subscribe(res => {
      if (!environment.production) {
        console.log(res);
      }
      this.listofnotification = [];
      let i = 0;
      res.list_of_notification.forEach(element => {
        i++;
        const parameters = JSON.parse(element.parameters);
        this.listofnotification.push({
          id: element.id,
          order: i,
          organization_name: element.organization_name,
          notification_number: parameters.notification_number
        });
      });
      // console.log(this.listofnotification);
    },
      (error) => {
        this.blockUI.stop();
      },
      () => {
        if (this.Notification.message.length > 0) {
          this.message = this.Notification.message;
          setTimeout(() => {
            this.message = [];
            this.Notification.message = [];
          }, 3000);
        }
        this.blockUI.stop();
      });
  }
}
